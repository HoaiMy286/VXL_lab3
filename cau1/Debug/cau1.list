
cau1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ffc  08002ffc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002ffc  08002ffc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ffc  08002ffc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000088  0800308c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800308c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088c1  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e5  00000000  00000000  00028972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b0b  00000000  00000000  0002b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b25f  00000000  00000000  000421d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821d4  00000000  00000000  0004d432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002888  00000000  00000000  000cf658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fc4 	.word	0x08002fc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002fc4 	.word	0x08002fc4

0800014c <isButtonNPressed>:
int KeyReg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimerForKeyPress[3] = {300, 300, 300};

int isButtonNPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (buttonN_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonNPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonNPressed+0x22>
		buttonN_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonNPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonNPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000a4 	.word	0x200000a4

08000180 <subKeyProcess>:
void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	buttonN_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000a4 	.word	0x200000a4

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTONS; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e074      	b.n	8000296 <getKeyInput+0xf6>
	{
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3e      	ldr	r2, [pc, #248]	; (80002a8 <getKeyInput+0x108>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493d      	ldr	r1, [pc, #244]	; (80002ac <getKeyInput+0x10c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3c      	ldr	r2, [pc, #240]	; (80002b0 <getKeyInput+0x110>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4938      	ldr	r1, [pc, #224]	; (80002a8 <getKeyInput+0x108>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(GPIOA, buttonN_PIN[i]);
 80001cc:	4a39      	ldr	r2, [pc, #228]	; (80002b4 <getKeyInput+0x114>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	4837      	ldr	r0, [pc, #220]	; (80002b8 <getKeyInput+0x118>)
 80001da:	f001 feb3 	bl	8001f44 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a33      	ldr	r2, [pc, #204]	; (80002b0 <getKeyInput+0x110>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i]))
 80001ea:	4a30      	ldr	r2, [pc, #192]	; (80002ac <getKeyInput+0x10c>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	492d      	ldr	r1, [pc, #180]	; (80002a8 <getKeyInput+0x108>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d148      	bne.n	8000290 <getKeyInput+0xf0>
 80001fe:	4a2a      	ldr	r2, [pc, #168]	; (80002a8 <getKeyInput+0x108>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	492a      	ldr	r1, [pc, #168]	; (80002b0 <getKeyInput+0x110>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d13e      	bne.n	8000290 <getKeyInput+0xf0>
		{
			if (KeyReg3[i] != KeyReg2[i])
 8000212:	4a2a      	ldr	r2, [pc, #168]	; (80002bc <getKeyInput+0x11c>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4925      	ldr	r1, [pc, #148]	; (80002b0 <getKeyInput+0x110>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d017      	beq.n	8000256 <getKeyInput+0xb6>
			{
				KeyReg3[i] = KeyReg2[i];
 8000226:	4a22      	ldr	r2, [pc, #136]	; (80002b0 <getKeyInput+0x110>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	4923      	ldr	r1, [pc, #140]	; (80002bc <getKeyInput+0x11c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE)
 8000236:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <getKeyInput+0x110>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d126      	bne.n	8000290 <getKeyInput+0xf0>
				{
					subKeyProcess(i);
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ff9c 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 300;
 8000248:	4a1d      	ldr	r2, [pc, #116]	; (80002c0 <getKeyInput+0x120>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000254:	e01c      	b.n	8000290 <getKeyInput+0xf0>
				}
			}
			else
			{
				TimerForKeyPress[i]--;
 8000256:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <getKeyInput+0x120>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025e:	1e5a      	subs	r2, r3, #1
 8000260:	4917      	ldr	r1, [pc, #92]	; (80002c0 <getKeyInput+0x120>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0)
 8000268:	4a15      	ldr	r2, [pc, #84]	; (80002c0 <getKeyInput+0x120>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10d      	bne.n	8000290 <getKeyInput+0xf0>
				{
					if(KeyReg2[i] == PRESSED_STATE)
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <getKeyInput+0x110>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d102      	bne.n	8000286 <getKeyInput+0xe6>
						subKeyProcess(i);
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ff7d 	bl	8000180 <subKeyProcess>

					TimerForKeyPress[i] = 100;
 8000286:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <getKeyInput+0x120>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2164      	movs	r1, #100	; 0x64
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTONS; i++)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b02      	cmp	r3, #2
 800029a:	dd87      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000018 	.word	0x20000018
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000024 	.word	0x20000024
 80002b4:	20000000 	.word	0x20000000
 80002b8:	40010800 	.word	0x40010800
 80002bc:	20000030 	.word	0x20000030
 80002c0:	2000003c 	.word	0x2000003c

080002c4 <display7SEG_1>:

#include "display_seg.h"

/// display seg 1 ////////
void display7SEG_1(int num)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if (num == 0)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d122      	bne.n	8000318 <display7SEG_1+0x54>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2101      	movs	r1, #1
 80002d6:	48bd      	ldr	r0, [pc, #756]	; (80005cc <display7SEG_1+0x308>)
 80002d8:	f001 fe4b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80002dc:	2200      	movs	r2, #0
 80002de:	2102      	movs	r1, #2
 80002e0:	48ba      	ldr	r0, [pc, #744]	; (80005cc <display7SEG_1+0x308>)
 80002e2:	f001 fe46 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2104      	movs	r1, #4
 80002ea:	48b8      	ldr	r0, [pc, #736]	; (80005cc <display7SEG_1+0x308>)
 80002ec:	f001 fe41 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2108      	movs	r1, #8
 80002f4:	48b5      	ldr	r0, [pc, #724]	; (80005cc <display7SEG_1+0x308>)
 80002f6:	f001 fe3c 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2110      	movs	r1, #16
 80002fe:	48b3      	ldr	r0, [pc, #716]	; (80005cc <display7SEG_1+0x308>)
 8000300:	f001 fe37 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000304:	2200      	movs	r2, #0
 8000306:	2120      	movs	r1, #32
 8000308:	48b0      	ldr	r0, [pc, #704]	; (80005cc <display7SEG_1+0x308>)
 800030a:	f001 fe32 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 800030e:	2201      	movs	r2, #1
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	48ae      	ldr	r0, [pc, #696]	; (80005cc <display7SEG_1+0x308>)
 8000314:	f001 fe2d 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d122      	bne.n	8000364 <display7SEG_1+0xa0>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,1);
 800031e:	2201      	movs	r2, #1
 8000320:	2101      	movs	r1, #1
 8000322:	48aa      	ldr	r0, [pc, #680]	; (80005cc <display7SEG_1+0x308>)
 8000324:	f001 fe25 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000328:	2200      	movs	r2, #0
 800032a:	2102      	movs	r1, #2
 800032c:	48a7      	ldr	r0, [pc, #668]	; (80005cc <display7SEG_1+0x308>)
 800032e:	f001 fe20 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000332:	2200      	movs	r2, #0
 8000334:	2104      	movs	r1, #4
 8000336:	48a5      	ldr	r0, [pc, #660]	; (80005cc <display7SEG_1+0x308>)
 8000338:	f001 fe1b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 800033c:	2201      	movs	r2, #1
 800033e:	2108      	movs	r1, #8
 8000340:	48a2      	ldr	r0, [pc, #648]	; (80005cc <display7SEG_1+0x308>)
 8000342:	f001 fe16 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000346:	2201      	movs	r2, #1
 8000348:	2110      	movs	r1, #16
 800034a:	48a0      	ldr	r0, [pc, #640]	; (80005cc <display7SEG_1+0x308>)
 800034c:	f001 fe11 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 8000350:	2201      	movs	r2, #1
 8000352:	2120      	movs	r1, #32
 8000354:	489d      	ldr	r0, [pc, #628]	; (80005cc <display7SEG_1+0x308>)
 8000356:	f001 fe0c 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 800035a:	2201      	movs	r2, #1
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	489b      	ldr	r0, [pc, #620]	; (80005cc <display7SEG_1+0x308>)
 8000360:	f001 fe07 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d122      	bne.n	80003b0 <display7SEG_1+0xec>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800036a:	2200      	movs	r2, #0
 800036c:	2101      	movs	r1, #1
 800036e:	4897      	ldr	r0, [pc, #604]	; (80005cc <display7SEG_1+0x308>)
 8000370:	f001 fdff 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000374:	2200      	movs	r2, #0
 8000376:	2102      	movs	r1, #2
 8000378:	4894      	ldr	r0, [pc, #592]	; (80005cc <display7SEG_1+0x308>)
 800037a:	f001 fdfa 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,1);
 800037e:	2201      	movs	r2, #1
 8000380:	2104      	movs	r1, #4
 8000382:	4892      	ldr	r0, [pc, #584]	; (80005cc <display7SEG_1+0x308>)
 8000384:	f001 fdf5 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000388:	2200      	movs	r2, #0
 800038a:	2108      	movs	r1, #8
 800038c:	488f      	ldr	r0, [pc, #572]	; (80005cc <display7SEG_1+0x308>)
 800038e:	f001 fdf0 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000392:	2200      	movs	r2, #0
 8000394:	2110      	movs	r1, #16
 8000396:	488d      	ldr	r0, [pc, #564]	; (80005cc <display7SEG_1+0x308>)
 8000398:	f001 fdeb 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 800039c:	2201      	movs	r2, #1
 800039e:	2120      	movs	r1, #32
 80003a0:	488a      	ldr	r0, [pc, #552]	; (80005cc <display7SEG_1+0x308>)
 80003a2:	f001 fde6 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2140      	movs	r1, #64	; 0x40
 80003aa:	4888      	ldr	r0, [pc, #544]	; (80005cc <display7SEG_1+0x308>)
 80003ac:	f001 fde1 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2b03      	cmp	r3, #3
 80003b4:	d122      	bne.n	80003fc <display7SEG_1+0x138>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2101      	movs	r1, #1
 80003ba:	4884      	ldr	r0, [pc, #528]	; (80005cc <display7SEG_1+0x308>)
 80003bc:	f001 fdd9 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2102      	movs	r1, #2
 80003c4:	4881      	ldr	r0, [pc, #516]	; (80005cc <display7SEG_1+0x308>)
 80003c6:	f001 fdd4 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2104      	movs	r1, #4
 80003ce:	487f      	ldr	r0, [pc, #508]	; (80005cc <display7SEG_1+0x308>)
 80003d0:	f001 fdcf 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2108      	movs	r1, #8
 80003d8:	487c      	ldr	r0, [pc, #496]	; (80005cc <display7SEG_1+0x308>)
 80003da:	f001 fdca 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 80003de:	2201      	movs	r2, #1
 80003e0:	2110      	movs	r1, #16
 80003e2:	487a      	ldr	r0, [pc, #488]	; (80005cc <display7SEG_1+0x308>)
 80003e4:	f001 fdc5 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2120      	movs	r1, #32
 80003ec:	4877      	ldr	r0, [pc, #476]	; (80005cc <display7SEG_1+0x308>)
 80003ee:	f001 fdc0 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2140      	movs	r1, #64	; 0x40
 80003f6:	4875      	ldr	r0, [pc, #468]	; (80005cc <display7SEG_1+0x308>)
 80003f8:	f001 fdbb 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d122      	bne.n	8000448 <display7SEG_1+0x184>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,1);
 8000402:	2201      	movs	r2, #1
 8000404:	2101      	movs	r1, #1
 8000406:	4871      	ldr	r0, [pc, #452]	; (80005cc <display7SEG_1+0x308>)
 8000408:	f001 fdb3 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 800040c:	2200      	movs	r2, #0
 800040e:	2102      	movs	r1, #2
 8000410:	486e      	ldr	r0, [pc, #440]	; (80005cc <display7SEG_1+0x308>)
 8000412:	f001 fdae 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000416:	2200      	movs	r2, #0
 8000418:	2104      	movs	r1, #4
 800041a:	486c      	ldr	r0, [pc, #432]	; (80005cc <display7SEG_1+0x308>)
 800041c:	f001 fda9 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 8000420:	2201      	movs	r2, #1
 8000422:	2108      	movs	r1, #8
 8000424:	4869      	ldr	r0, [pc, #420]	; (80005cc <display7SEG_1+0x308>)
 8000426:	f001 fda4 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 800042a:	2201      	movs	r2, #1
 800042c:	2110      	movs	r1, #16
 800042e:	4867      	ldr	r0, [pc, #412]	; (80005cc <display7SEG_1+0x308>)
 8000430:	f001 fd9f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000434:	2200      	movs	r2, #0
 8000436:	2120      	movs	r1, #32
 8000438:	4864      	ldr	r0, [pc, #400]	; (80005cc <display7SEG_1+0x308>)
 800043a:	f001 fd9a 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800043e:	2200      	movs	r2, #0
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	4862      	ldr	r0, [pc, #392]	; (80005cc <display7SEG_1+0x308>)
 8000444:	f001 fd95 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b05      	cmp	r3, #5
 800044c:	d122      	bne.n	8000494 <display7SEG_1+0x1d0>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800044e:	2200      	movs	r2, #0
 8000450:	2101      	movs	r1, #1
 8000452:	485e      	ldr	r0, [pc, #376]	; (80005cc <display7SEG_1+0x308>)
 8000454:	f001 fd8d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,1);
 8000458:	2201      	movs	r2, #1
 800045a:	2102      	movs	r1, #2
 800045c:	485b      	ldr	r0, [pc, #364]	; (80005cc <display7SEG_1+0x308>)
 800045e:	f001 fd88 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000462:	2200      	movs	r2, #0
 8000464:	2104      	movs	r1, #4
 8000466:	4859      	ldr	r0, [pc, #356]	; (80005cc <display7SEG_1+0x308>)
 8000468:	f001 fd83 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 800046c:	2200      	movs	r2, #0
 800046e:	2108      	movs	r1, #8
 8000470:	4856      	ldr	r0, [pc, #344]	; (80005cc <display7SEG_1+0x308>)
 8000472:	f001 fd7e 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000476:	2201      	movs	r2, #1
 8000478:	2110      	movs	r1, #16
 800047a:	4854      	ldr	r0, [pc, #336]	; (80005cc <display7SEG_1+0x308>)
 800047c:	f001 fd79 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000480:	2200      	movs	r2, #0
 8000482:	2120      	movs	r1, #32
 8000484:	4851      	ldr	r0, [pc, #324]	; (80005cc <display7SEG_1+0x308>)
 8000486:	f001 fd74 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800048a:	2200      	movs	r2, #0
 800048c:	2140      	movs	r1, #64	; 0x40
 800048e:	484f      	ldr	r0, [pc, #316]	; (80005cc <display7SEG_1+0x308>)
 8000490:	f001 fd6f 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b06      	cmp	r3, #6
 8000498:	d122      	bne.n	80004e0 <display7SEG_1+0x21c>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	484b      	ldr	r0, [pc, #300]	; (80005cc <display7SEG_1+0x308>)
 80004a0:	f001 fd67 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2102      	movs	r1, #2
 80004a8:	4848      	ldr	r0, [pc, #288]	; (80005cc <display7SEG_1+0x308>)
 80004aa:	f001 fd62 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2104      	movs	r1, #4
 80004b2:	4846      	ldr	r0, [pc, #280]	; (80005cc <display7SEG_1+0x308>)
 80004b4:	f001 fd5d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2108      	movs	r1, #8
 80004bc:	4843      	ldr	r0, [pc, #268]	; (80005cc <display7SEG_1+0x308>)
 80004be:	f001 fd58 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2110      	movs	r1, #16
 80004c6:	4841      	ldr	r0, [pc, #260]	; (80005cc <display7SEG_1+0x308>)
 80004c8:	f001 fd53 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2120      	movs	r1, #32
 80004d0:	483e      	ldr	r0, [pc, #248]	; (80005cc <display7SEG_1+0x308>)
 80004d2:	f001 fd4e 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2140      	movs	r1, #64	; 0x40
 80004da:	483c      	ldr	r0, [pc, #240]	; (80005cc <display7SEG_1+0x308>)
 80004dc:	f001 fd49 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b07      	cmp	r3, #7
 80004e4:	d122      	bne.n	800052c <display7SEG_1+0x268>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	4838      	ldr	r0, [pc, #224]	; (80005cc <display7SEG_1+0x308>)
 80004ec:	f001 fd41 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2102      	movs	r1, #2
 80004f4:	4835      	ldr	r0, [pc, #212]	; (80005cc <display7SEG_1+0x308>)
 80004f6:	f001 fd3c 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2104      	movs	r1, #4
 80004fe:	4833      	ldr	r0, [pc, #204]	; (80005cc <display7SEG_1+0x308>)
 8000500:	f001 fd37 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	4830      	ldr	r0, [pc, #192]	; (80005cc <display7SEG_1+0x308>)
 800050a:	f001 fd32 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 800050e:	2201      	movs	r2, #1
 8000510:	2110      	movs	r1, #16
 8000512:	482e      	ldr	r0, [pc, #184]	; (80005cc <display7SEG_1+0x308>)
 8000514:	f001 fd2d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 8000518:	2201      	movs	r2, #1
 800051a:	2120      	movs	r1, #32
 800051c:	482b      	ldr	r0, [pc, #172]	; (80005cc <display7SEG_1+0x308>)
 800051e:	f001 fd28 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 8000522:	2201      	movs	r2, #1
 8000524:	2140      	movs	r1, #64	; 0x40
 8000526:	4829      	ldr	r0, [pc, #164]	; (80005cc <display7SEG_1+0x308>)
 8000528:	f001 fd23 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b08      	cmp	r3, #8
 8000530:	d122      	bne.n	8000578 <display7SEG_1+0x2b4>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 8000532:	2200      	movs	r2, #0
 8000534:	2101      	movs	r1, #1
 8000536:	4825      	ldr	r0, [pc, #148]	; (80005cc <display7SEG_1+0x308>)
 8000538:	f001 fd1b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 800053c:	2200      	movs	r2, #0
 800053e:	2102      	movs	r1, #2
 8000540:	4822      	ldr	r0, [pc, #136]	; (80005cc <display7SEG_1+0x308>)
 8000542:	f001 fd16 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000546:	2200      	movs	r2, #0
 8000548:	2104      	movs	r1, #4
 800054a:	4820      	ldr	r0, [pc, #128]	; (80005cc <display7SEG_1+0x308>)
 800054c:	f001 fd11 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000550:	2200      	movs	r2, #0
 8000552:	2108      	movs	r1, #8
 8000554:	481d      	ldr	r0, [pc, #116]	; (80005cc <display7SEG_1+0x308>)
 8000556:	f001 fd0c 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 800055a:	2200      	movs	r2, #0
 800055c:	2110      	movs	r1, #16
 800055e:	481b      	ldr	r0, [pc, #108]	; (80005cc <display7SEG_1+0x308>)
 8000560:	f001 fd07 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000564:	2200      	movs	r2, #0
 8000566:	2120      	movs	r1, #32
 8000568:	4818      	ldr	r0, [pc, #96]	; (80005cc <display7SEG_1+0x308>)
 800056a:	f001 fd02 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800056e:	2200      	movs	r2, #0
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	4816      	ldr	r0, [pc, #88]	; (80005cc <display7SEG_1+0x308>)
 8000574:	f001 fcfd 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b09      	cmp	r3, #9
 800057c:	d122      	bne.n	80005c4 <display7SEG_1+0x300>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800057e:	2200      	movs	r2, #0
 8000580:	2101      	movs	r1, #1
 8000582:	4812      	ldr	r0, [pc, #72]	; (80005cc <display7SEG_1+0x308>)
 8000584:	f001 fcf5 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000588:	2200      	movs	r2, #0
 800058a:	2102      	movs	r1, #2
 800058c:	480f      	ldr	r0, [pc, #60]	; (80005cc <display7SEG_1+0x308>)
 800058e:	f001 fcf0 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000592:	2200      	movs	r2, #0
 8000594:	2104      	movs	r1, #4
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <display7SEG_1+0x308>)
 8000598:	f001 fceb 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 800059c:	2200      	movs	r2, #0
 800059e:	2108      	movs	r1, #8
 80005a0:	480a      	ldr	r0, [pc, #40]	; (80005cc <display7SEG_1+0x308>)
 80005a2:	f001 fce6 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2110      	movs	r1, #16
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <display7SEG_1+0x308>)
 80005ac:	f001 fce1 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <display7SEG_1+0x308>)
 80005b6:	f001 fcdc 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <display7SEG_1+0x308>)
 80005c0:	f001 fcd7 	bl	8001f72 <HAL_GPIO_WritePin>
	}
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <display7SEG_2>:

//// display seg 2 //////////
void display7SEG_2(int num)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (num == 0)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d128      	bne.n	8000630 <display7SEG_2+0x60>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	48cf      	ldr	r0, [pc, #828]	; (8000920 <display7SEG_2+0x350>)
 80005e4:	f001 fcc5 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ee:	48cc      	ldr	r0, [pc, #816]	; (8000920 <display7SEG_2+0x350>)
 80005f0:	f001 fcbf 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fa:	48c9      	ldr	r0, [pc, #804]	; (8000920 <display7SEG_2+0x350>)
 80005fc:	f001 fcb9 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	48c6      	ldr	r0, [pc, #792]	; (8000920 <display7SEG_2+0x350>)
 8000608:	f001 fcb3 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000612:	48c3      	ldr	r0, [pc, #780]	; (8000920 <display7SEG_2+0x350>)
 8000614:	f001 fcad 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061e:	48c0      	ldr	r0, [pc, #768]	; (8000920 <display7SEG_2+0x350>)
 8000620:	f001 fca7 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062a:	48bd      	ldr	r0, [pc, #756]	; (8000920 <display7SEG_2+0x350>)
 800062c:	f001 fca1 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d128      	bne.n	8000688 <display7SEG_2+0xb8>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,1);
 8000636:	2201      	movs	r2, #1
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	48b9      	ldr	r0, [pc, #740]	; (8000920 <display7SEG_2+0x350>)
 800063c:	f001 fc99 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	48b6      	ldr	r0, [pc, #728]	; (8000920 <display7SEG_2+0x350>)
 8000648:	f001 fc93 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000652:	48b3      	ldr	r0, [pc, #716]	; (8000920 <display7SEG_2+0x350>)
 8000654:	f001 fc8d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,1);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	48b0      	ldr	r0, [pc, #704]	; (8000920 <display7SEG_2+0x350>)
 8000660:	f001 fc87 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066a:	48ad      	ldr	r0, [pc, #692]	; (8000920 <display7SEG_2+0x350>)
 800066c:	f001 fc81 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000676:	48aa      	ldr	r0, [pc, #680]	; (8000920 <display7SEG_2+0x350>)
 8000678:	f001 fc7b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,1);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000682:	48a7      	ldr	r0, [pc, #668]	; (8000920 <display7SEG_2+0x350>)
 8000684:	f001 fc75 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d128      	bne.n	80006e0 <display7SEG_2+0x110>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	48a3      	ldr	r0, [pc, #652]	; (8000920 <display7SEG_2+0x350>)
 8000694:	f001 fc6d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	48a0      	ldr	r0, [pc, #640]	; (8000920 <display7SEG_2+0x350>)
 80006a0:	f001 fc67 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,1);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006aa:	489d      	ldr	r0, [pc, #628]	; (8000920 <display7SEG_2+0x350>)
 80006ac:	f001 fc61 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	489a      	ldr	r0, [pc, #616]	; (8000920 <display7SEG_2+0x350>)
 80006b8:	f001 fc5b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4897      	ldr	r0, [pc, #604]	; (8000920 <display7SEG_2+0x350>)
 80006c4:	f001 fc55 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	4894      	ldr	r0, [pc, #592]	; (8000920 <display7SEG_2+0x350>)
 80006d0:	f001 fc4f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4891      	ldr	r0, [pc, #580]	; (8000920 <display7SEG_2+0x350>)
 80006dc:	f001 fc49 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d128      	bne.n	8000738 <display7SEG_2+0x168>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	488d      	ldr	r0, [pc, #564]	; (8000920 <display7SEG_2+0x350>)
 80006ec:	f001 fc41 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	488a      	ldr	r0, [pc, #552]	; (8000920 <display7SEG_2+0x350>)
 80006f8:	f001 fc3b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000702:	4887      	ldr	r0, [pc, #540]	; (8000920 <display7SEG_2+0x350>)
 8000704:	f001 fc35 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070e:	4884      	ldr	r0, [pc, #528]	; (8000920 <display7SEG_2+0x350>)
 8000710:	f001 fc2f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071a:	4881      	ldr	r0, [pc, #516]	; (8000920 <display7SEG_2+0x350>)
 800071c:	f001 fc29 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	487e      	ldr	r0, [pc, #504]	; (8000920 <display7SEG_2+0x350>)
 8000728:	f001 fc23 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000732:	487b      	ldr	r0, [pc, #492]	; (8000920 <display7SEG_2+0x350>)
 8000734:	f001 fc1d 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b04      	cmp	r3, #4
 800073c:	d128      	bne.n	8000790 <display7SEG_2+0x1c0>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,1);
 800073e:	2201      	movs	r2, #1
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	4877      	ldr	r0, [pc, #476]	; (8000920 <display7SEG_2+0x350>)
 8000744:	f001 fc15 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	4874      	ldr	r0, [pc, #464]	; (8000920 <display7SEG_2+0x350>)
 8000750:	f001 fc0f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075a:	4871      	ldr	r0, [pc, #452]	; (8000920 <display7SEG_2+0x350>)
 800075c:	f001 fc09 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,1);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	486e      	ldr	r0, [pc, #440]	; (8000920 <display7SEG_2+0x350>)
 8000768:	f001 fc03 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000772:	486b      	ldr	r0, [pc, #428]	; (8000920 <display7SEG_2+0x350>)
 8000774:	f001 fbfd 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077e:	4868      	ldr	r0, [pc, #416]	; (8000920 <display7SEG_2+0x350>)
 8000780:	f001 fbf7 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	4865      	ldr	r0, [pc, #404]	; (8000920 <display7SEG_2+0x350>)
 800078c:	f001 fbf1 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b05      	cmp	r3, #5
 8000794:	d128      	bne.n	80007e8 <display7SEG_2+0x218>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 8000796:	2200      	movs	r2, #0
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	4861      	ldr	r0, [pc, #388]	; (8000920 <display7SEG_2+0x350>)
 800079c:	f001 fbe9 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a6:	485e      	ldr	r0, [pc, #376]	; (8000920 <display7SEG_2+0x350>)
 80007a8:	f001 fbe3 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b2:	485b      	ldr	r0, [pc, #364]	; (8000920 <display7SEG_2+0x350>)
 80007b4:	f001 fbdd 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007be:	4858      	ldr	r0, [pc, #352]	; (8000920 <display7SEG_2+0x350>)
 80007c0:	f001 fbd7 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ca:	4855      	ldr	r0, [pc, #340]	; (8000920 <display7SEG_2+0x350>)
 80007cc:	f001 fbd1 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	4852      	ldr	r0, [pc, #328]	; (8000920 <display7SEG_2+0x350>)
 80007d8:	f001 fbcb 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e2:	484f      	ldr	r0, [pc, #316]	; (8000920 <display7SEG_2+0x350>)
 80007e4:	f001 fbc5 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d128      	bne.n	8000840 <display7SEG_2+0x270>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	484b      	ldr	r0, [pc, #300]	; (8000920 <display7SEG_2+0x350>)
 80007f4:	f001 fbbd 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fe:	4848      	ldr	r0, [pc, #288]	; (8000920 <display7SEG_2+0x350>)
 8000800:	f001 fbb7 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080a:	4845      	ldr	r0, [pc, #276]	; (8000920 <display7SEG_2+0x350>)
 800080c:	f001 fbb1 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000816:	4842      	ldr	r0, [pc, #264]	; (8000920 <display7SEG_2+0x350>)
 8000818:	f001 fbab 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000822:	483f      	ldr	r0, [pc, #252]	; (8000920 <display7SEG_2+0x350>)
 8000824:	f001 fba5 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082e:	483c      	ldr	r0, [pc, #240]	; (8000920 <display7SEG_2+0x350>)
 8000830:	f001 fb9f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083a:	4839      	ldr	r0, [pc, #228]	; (8000920 <display7SEG_2+0x350>)
 800083c:	f001 fb99 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d128      	bne.n	8000898 <display7SEG_2+0x2c8>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 8000846:	2200      	movs	r2, #0
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	4835      	ldr	r0, [pc, #212]	; (8000920 <display7SEG_2+0x350>)
 800084c:	f001 fb91 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	4832      	ldr	r0, [pc, #200]	; (8000920 <display7SEG_2+0x350>)
 8000858:	f001 fb8b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000862:	482f      	ldr	r0, [pc, #188]	; (8000920 <display7SEG_2+0x350>)
 8000864:	f001 fb85 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,1);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	482c      	ldr	r0, [pc, #176]	; (8000920 <display7SEG_2+0x350>)
 8000870:	f001 fb7f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <display7SEG_2+0x350>)
 800087c:	f001 fb79 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4826      	ldr	r0, [pc, #152]	; (8000920 <display7SEG_2+0x350>)
 8000888:	f001 fb73 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,1);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	4823      	ldr	r0, [pc, #140]	; (8000920 <display7SEG_2+0x350>)
 8000894:	f001 fb6d 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b08      	cmp	r3, #8
 800089c:	d128      	bne.n	80008f0 <display7SEG_2+0x320>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	481f      	ldr	r0, [pc, #124]	; (8000920 <display7SEG_2+0x350>)
 80008a4:	f001 fb65 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ae:	481c      	ldr	r0, [pc, #112]	; (8000920 <display7SEG_2+0x350>)
 80008b0:	f001 fb5f 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ba:	4819      	ldr	r0, [pc, #100]	; (8000920 <display7SEG_2+0x350>)
 80008bc:	f001 fb59 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4816      	ldr	r0, [pc, #88]	; (8000920 <display7SEG_2+0x350>)
 80008c8:	f001 fb53 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d2:	4813      	ldr	r0, [pc, #76]	; (8000920 <display7SEG_2+0x350>)
 80008d4:	f001 fb4d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008de:	4810      	ldr	r0, [pc, #64]	; (8000920 <display7SEG_2+0x350>)
 80008e0:	f001 fb47 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <display7SEG_2+0x350>)
 80008ec:	f001 fb41 	bl	8001f72 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b09      	cmp	r3, #9
 80008f4:	d12b      	bne.n	800094e <display7SEG_2+0x37e>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	4809      	ldr	r0, [pc, #36]	; (8000920 <display7SEG_2+0x350>)
 80008fc:	f001 fb39 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <display7SEG_2+0x350>)
 8000908:	f001 fb33 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <display7SEG_2+0x350>)
 8000914:	f001 fb2d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091e:	e001      	b.n	8000924 <display7SEG_2+0x354>
 8000920:	40010c00 	.word	0x40010c00
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <display7SEG_2+0x388>)
 8000926:	f001 fb24 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <display7SEG_2+0x388>)
 8000932:	f001 fb1e 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <display7SEG_2+0x388>)
 800093e:	f001 fb18 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <display7SEG_2+0x388>)
 800094a:	f001 fb12 	bl	8001f72 <HAL_GPIO_WritePin>
	}
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40010c00 	.word	0x40010c00

0800095c <subcount1>:
int chuc = 0;	// value 1
int dvi = 0;	// value 2

//// sub count road 1 ////
void subcount1()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	if(timer3_flag == 1)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <subcount1+0x54>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d121      	bne.n	80009ac <subcount1+0x50>
	{
		setTimer3(1000);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f000 fe74 	bl	8001658 <setTimer3>
		count1--;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <subcount1+0x58>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3b01      	subs	r3, #1
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <subcount1+0x58>)
 8000978:	6013      	str	r3, [r2, #0]

		count [0] = count1 / 10;	//
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <subcount1+0x58>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <subcount1+0x5c>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1092      	asrs	r2, r2, #2
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <subcount1+0x60>)
 800098c:	6013      	str	r3, [r2, #0]
		count [1] = count1 % 10;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <subcount1+0x58>)
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <subcount1+0x5c>)
 8000994:	fb83 2301 	smull	r2, r3, r3, r1
 8000998:	109a      	asrs	r2, r3, #2
 800099a:	17cb      	asrs	r3, r1, #31
 800099c:	1ad2      	subs	r2, r2, r3
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	1aca      	subs	r2, r1, r3
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <subcount1+0x60>)
 80009aa:	605a      	str	r2, [r3, #4]
	}
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000120 	.word	0x20000120
 80009b4:	20000048 	.word	0x20000048
 80009b8:	66666667 	.word	0x66666667
 80009bc:	2000005c 	.word	0x2000005c

080009c0 <subcount2>:

//// sub count road 2 ////
void subcount2()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if(timer4_flag == 1)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <subcount2+0x54>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d121      	bne.n	8000a10 <subcount2+0x50>
	{
		setTimer4(1000);
 80009cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d0:	f000 fe5c 	bl	800168c <setTimer4>
		count2--;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <subcount2+0x58>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3b01      	subs	r3, #1
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <subcount2+0x58>)
 80009dc:	6013      	str	r3, [r2, #0]

		count [2] = count2 / 10;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <subcount2+0x58>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <subcount2+0x5c>)
 80009e4:	fb82 1203 	smull	r1, r2, r2, r3
 80009e8:	1092      	asrs	r2, r2, #2
 80009ea:	17db      	asrs	r3, r3, #31
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <subcount2+0x60>)
 80009f0:	6093      	str	r3, [r2, #8]
		count [3] = count2 % 10;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <subcount2+0x58>)
 80009f4:	6819      	ldr	r1, [r3, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <subcount2+0x5c>)
 80009f8:	fb83 2301 	smull	r2, r3, r3, r1
 80009fc:	109a      	asrs	r2, r3, #2
 80009fe:	17cb      	asrs	r3, r1, #31
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	4613      	mov	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	1aca      	subs	r2, r1, r3
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <subcount2+0x60>)
 8000a0e:	60da      	str	r2, [r3, #12]
	}
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000128 	.word	0x20000128
 8000a18:	2000004c 	.word	0x2000004c
 8000a1c:	66666667 	.word	0x66666667
 8000a20:	2000005c 	.word	0x2000005c

08000a24 <update>:

//// timer 5 for index_led
void update()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	  if (timer5_flag == 1)
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <update+0x30>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d108      	bne.n	8000a42 <update+0x1e>
	  {
		  setTimer5(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a34:	f000 fe44 	bl	80016c0 <setTimer5>
		  index_led++;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <update+0x34>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <update+0x34>)
 8000a40:	6013      	str	r3, [r2, #0]
	  }

	  if(index_led == 2)
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <update+0x34>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d102      	bne.n	8000a50 <update+0x2c>
		  index_led = 0;
 8000a4a:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <update+0x34>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000130 	.word	0x20000130
 8000a58:	200000b0 	.word	0x200000b0

08000a5c <controlButton>:

//// BUTTON ////////////
void controlButton()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	if (isButtonNPressed(0) == 1)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fb73 	bl	800014c <isButtonNPressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d104      	bne.n	8000a76 <controlButton+0x1a>
		mode++;
 8000a6c:	4b7c      	ldr	r3, [pc, #496]	; (8000c60 <controlButton+0x204>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a7b      	ldr	r2, [pc, #492]	; (8000c60 <controlButton+0x204>)
 8000a74:	6013      	str	r3, [r2, #0]

	if(mode == 5)
 8000a76:	4b7a      	ldr	r3, [pc, #488]	; (8000c60 <controlButton+0x204>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b05      	cmp	r3, #5
 8000a7c:	d111      	bne.n	8000aa2 <controlButton+0x46>
	{
		mode = 1;
 8000a7e:	4b78      	ldr	r3, [pc, #480]	; (8000c60 <controlButton+0x204>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
		status_1 = INIT_1;
 8000a84:	4b77      	ldr	r3, [pc, #476]	; (8000c64 <controlButton+0x208>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
		status_2 = INIT_2;
 8000a8a:	4b77      	ldr	r3, [pc, #476]	; (8000c68 <controlButton+0x20c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]

		increaseRed = 0;
 8000a90:	4b76      	ldr	r3, [pc, #472]	; (8000c6c <controlButton+0x210>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
		increaseYellow = 0;
 8000a96:	4b76      	ldr	r3, [pc, #472]	; (8000c70 <controlButton+0x214>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		increaseGreen = 0;
 8000a9c:	4b75      	ldr	r3, [pc, #468]	; (8000c74 <controlButton+0x218>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
	}

	////// display MODE /////////
	if(index_led == 0)
 8000aa2:	4b75      	ldr	r3, [pc, #468]	; (8000c78 <controlButton+0x21c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10e      	bne.n	8000ac8 <controlButton+0x6c>
	{
		display7SEG_1(0);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fc0a 	bl	80002c4 <display7SEG_1>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);	// seg 1 off
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4871      	ldr	r0, [pc, #452]	; (8000c7c <controlButton+0x220>)
 8000ab6:	f001 fa5c 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);	// seg 2 on
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	486e      	ldr	r0, [pc, #440]	; (8000c7c <controlButton+0x220>)
 8000ac2:	f001 fa56 	bl	8001f72 <HAL_GPIO_WritePin>
 8000ac6:	e00f      	b.n	8000ae8 <controlButton+0x8c>
	}
	else
	{
		display7SEG_1(mode);
 8000ac8:	4b65      	ldr	r3, [pc, #404]	; (8000c60 <controlButton+0x204>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fbf9 	bl	80002c4 <display7SEG_1>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);	// seg 1 on
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	4869      	ldr	r0, [pc, #420]	; (8000c7c <controlButton+0x220>)
 8000ad8:	f001 fa4b 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);	// seg 2 off
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae2:	4866      	ldr	r0, [pc, #408]	; (8000c7c <controlButton+0x220>)
 8000ae4:	f001 fa45 	bl	8001f72 <HAL_GPIO_WritePin>
	}

	switch(mode)
 8000ae8:	4b5d      	ldr	r3, [pc, #372]	; (8000c60 <controlButton+0x204>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	f200 8225 	bhi.w	8000f3e <controlButton+0x4e2>
 8000af4:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <controlButton+0xa0>)
 8000af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afa:	bf00      	nop
 8000afc:	08000f3f 	.word	0x08000f3f
 8000b00:	08000b0d 	.word	0x08000b0d
 8000b04:	08000c99 	.word	0x08000c99
 8000b08:	08000ded 	.word	0x08000ded
	{
	case 1:
		break;
	case 2:			// increase time duration RED
		////// // led RED BLINK //////////
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);		// yellow 1 off
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	485a      	ldr	r0, [pc, #360]	; (8000c7c <controlButton+0x220>)
 8000b12:	f001 fa2e 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);		// yellow 2 off
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1c:	4857      	ldr	r0, [pc, #348]	; (8000c7c <controlButton+0x220>)
 8000b1e:	f001 fa28 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);		// green 1 off
 8000b22:	2201      	movs	r2, #1
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4855      	ldr	r0, [pc, #340]	; (8000c7c <controlButton+0x220>)
 8000b28:	f001 fa23 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);		// green 2 off
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b32:	4852      	ldr	r0, [pc, #328]	; (8000c7c <controlButton+0x220>)
 8000b34:	f001 fa1d 	bl	8001f72 <HAL_GPIO_WritePin>

		if(timer6_flag == 1)
 8000b38:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <controlButton+0x224>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10c      	bne.n	8000b5a <controlButton+0xfe>
		{
			setTimer6(500);
 8000b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b44:	f000 fdd6 	bl	80016f4 <setTimer6>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000b48:	2120      	movs	r1, #32
 8000b4a:	484c      	ldr	r0, [pc, #304]	; (8000c7c <controlButton+0x220>)
 8000b4c:	f001 fa29 	bl	8001fa2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	4849      	ldr	r0, [pc, #292]	; (8000c7c <controlButton+0x220>)
 8000b56:	f001 fa24 	bl	8001fa2 <HAL_GPIO_TogglePin>
		}

		//// PRESS BUTTON 2 ///////
		if(isButtonNPressed(1) == 1)
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff faf6 	bl	800014c <isButtonNPressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d118      	bne.n	8000b98 <controlButton+0x13c>
		{
			increaseRed++;
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <controlButton+0x210>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a3f      	ldr	r2, [pc, #252]	; (8000c6c <controlButton+0x210>)
 8000b6e:	6013      	str	r3, [r2, #0]

			if((timered/1000 + increaseRed) > 99)
 8000b70:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <controlButton+0x228>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <controlButton+0x22c>)
 8000b76:	fb82 1203 	smull	r1, r2, r2, r3
 8000b7a:	1192      	asrs	r2, r2, #6
 8000b7c:	17db      	asrs	r3, r3, #31
 8000b7e:	1ad2      	subs	r2, r2, r3
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <controlButton+0x210>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	2b63      	cmp	r3, #99	; 0x63
 8000b88:	dd06      	ble.n	8000b98 <controlButton+0x13c>
			{
				timered = 1000;
 8000b8a:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <controlButton+0x228>)
 8000b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b90:	601a      	str	r2, [r3, #0]
				increaseRed = 0;
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <controlButton+0x210>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
			}
		}

		////// DISPLAY VALUE  /////////
		chuc = (timered/1000 + increaseRed)/10;
 8000b98:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <controlButton+0x228>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <controlButton+0x22c>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	1192      	asrs	r2, r2, #6
 8000ba4:	17db      	asrs	r3, r3, #31
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <controlButton+0x210>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <controlButton+0x230>)
 8000bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb4:	1092      	asrs	r2, r2, #2
 8000bb6:	17db      	asrs	r3, r3, #31
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	4a35      	ldr	r2, [pc, #212]	; (8000c90 <controlButton+0x234>)
 8000bbc:	6013      	str	r3, [r2, #0]
		dvi = (timered/1000 + increaseRed)%10;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <controlButton+0x228>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <controlButton+0x22c>)
 8000bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc8:	1192      	asrs	r2, r2, #6
 8000bca:	17db      	asrs	r3, r3, #31
 8000bcc:	1ad2      	subs	r2, r2, r3
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <controlButton+0x210>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	18d1      	adds	r1, r2, r3
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <controlButton+0x230>)
 8000bd6:	fb83 2301 	smull	r2, r3, r3, r1
 8000bda:	109a      	asrs	r2, r3, #2
 8000bdc:	17cb      	asrs	r3, r1, #31
 8000bde:	1ad2      	subs	r2, r2, r3
 8000be0:	4613      	mov	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	1aca      	subs	r2, r1, r3
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <controlButton+0x238>)
 8000bec:	601a      	str	r2, [r3, #0]

		if(index_led == 0)
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <controlButton+0x21c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10f      	bne.n	8000c16 <controlButton+0x1ba>
		{
			display7SEG_2(chuc);
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <controlButton+0x234>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fce8 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 off
 8000c00:	2200      	movs	r2, #0
 8000c02:	2104      	movs	r1, #4
 8000c04:	481d      	ldr	r0, [pc, #116]	; (8000c7c <controlButton+0x220>)
 8000c06:	f001 f9b4 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 on
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	481b      	ldr	r0, [pc, #108]	; (8000c7c <controlButton+0x220>)
 8000c10:	f001 f9af 	bl	8001f72 <HAL_GPIO_WritePin>
 8000c14:	e00e      	b.n	8000c34 <controlButton+0x1d8>
		}
		else
		{
			display7SEG_2(dvi);
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <controlButton+0x238>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fcd8 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 on
 8000c20:	2201      	movs	r2, #1
 8000c22:	2104      	movs	r1, #4
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <controlButton+0x220>)
 8000c26:	f001 f9a4 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 off
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	4813      	ldr	r0, [pc, #76]	; (8000c7c <controlButton+0x220>)
 8000c30:	f001 f99f 	bl	8001f72 <HAL_GPIO_WritePin>
		}

		////// PRESS BUTTON 3 /////////
		if(isButtonNPressed(2) == 1)
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fa89 	bl	800014c <isButtonNPressed>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	f040 8180 	bne.w	8000f42 <controlButton+0x4e6>
		{
			timered += increaseRed*1000;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <controlButton+0x210>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c4a:	fb03 f202 	mul.w	r2, r3, r2
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <controlButton+0x228>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <controlButton+0x228>)
 8000c56:	6013      	str	r3, [r2, #0]
			increaseRed = 0;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <controlButton+0x210>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c5e:	e170      	b.n	8000f42 <controlButton+0x4e6>
 8000c60:	2000006c 	.word	0x2000006c
 8000c64:	20000070 	.word	0x20000070
 8000c68:	20000074 	.word	0x20000074
 8000c6c:	200000b4 	.word	0x200000b4
 8000c70:	200000b8 	.word	0x200000b8
 8000c74:	200000bc 	.word	0x200000bc
 8000c78:	200000b0 	.word	0x200000b0
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	20000138 	.word	0x20000138
 8000c84:	20000050 	.word	0x20000050
 8000c88:	10624dd3 	.word	0x10624dd3
 8000c8c:	66666667 	.word	0x66666667
 8000c90:	200000c0 	.word	0x200000c0
 8000c94:	200000c4 	.word	0x200000c4
	case 3:			// increase time duration YELLOW
		////// // led RED BLINK //////////
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);		// RED 1 off
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	48ac      	ldr	r0, [pc, #688]	; (8000f50 <controlButton+0x4f4>)
 8000c9e:	f001 f968 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);		// RED 2 off
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca8:	48a9      	ldr	r0, [pc, #676]	; (8000f50 <controlButton+0x4f4>)
 8000caa:	f001 f962 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);		// green 1 off
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	48a7      	ldr	r0, [pc, #668]	; (8000f50 <controlButton+0x4f4>)
 8000cb4:	f001 f95d 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);		// green 2 off
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	48a4      	ldr	r0, [pc, #656]	; (8000f50 <controlButton+0x4f4>)
 8000cc0:	f001 f957 	bl	8001f72 <HAL_GPIO_WritePin>

		if(timer6_flag == 1)
 8000cc4:	4ba3      	ldr	r3, [pc, #652]	; (8000f54 <controlButton+0x4f8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10c      	bne.n	8000ce6 <controlButton+0x28a>
		{
			setTimer6(500);
 8000ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd0:	f000 fd10 	bl	80016f4 <setTimer6>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	489e      	ldr	r0, [pc, #632]	; (8000f50 <controlButton+0x4f4>)
 8000cd8:	f001 f963 	bl	8001fa2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8000cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce0:	489b      	ldr	r0, [pc, #620]	; (8000f50 <controlButton+0x4f4>)
 8000ce2:	f001 f95e 	bl	8001fa2 <HAL_GPIO_TogglePin>
		}

		//// PRESS BUTTON 2 ///////
		if(isButtonNPressed(1) == 1)
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fa30 	bl	800014c <isButtonNPressed>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d118      	bne.n	8000d24 <controlButton+0x2c8>
		{
			increaseYellow++;
 8000cf2:	4b99      	ldr	r3, [pc, #612]	; (8000f58 <controlButton+0x4fc>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a97      	ldr	r2, [pc, #604]	; (8000f58 <controlButton+0x4fc>)
 8000cfa:	6013      	str	r3, [r2, #0]

			if((timeyellow/1000 + increaseYellow) > 99)
 8000cfc:	4b97      	ldr	r3, [pc, #604]	; (8000f5c <controlButton+0x500>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a97      	ldr	r2, [pc, #604]	; (8000f60 <controlButton+0x504>)
 8000d02:	fb82 1203 	smull	r1, r2, r2, r3
 8000d06:	1192      	asrs	r2, r2, #6
 8000d08:	17db      	asrs	r3, r3, #31
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	4b92      	ldr	r3, [pc, #584]	; (8000f58 <controlButton+0x4fc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	2b63      	cmp	r3, #99	; 0x63
 8000d14:	dd06      	ble.n	8000d24 <controlButton+0x2c8>
			{
				timeyellow = 1000;
 8000d16:	4b91      	ldr	r3, [pc, #580]	; (8000f5c <controlButton+0x500>)
 8000d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d1c:	601a      	str	r2, [r3, #0]
				increaseYellow = 0;
 8000d1e:	4b8e      	ldr	r3, [pc, #568]	; (8000f58 <controlButton+0x4fc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
			}
		}

		////// DISPLAY VALUE  /////////
		chuc = (timeyellow/1000 + increaseYellow)/10;
 8000d24:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <controlButton+0x500>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a8d      	ldr	r2, [pc, #564]	; (8000f60 <controlButton+0x504>)
 8000d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2e:	1192      	asrs	r2, r2, #6
 8000d30:	17db      	asrs	r3, r3, #31
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	4b88      	ldr	r3, [pc, #544]	; (8000f58 <controlButton+0x4fc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a8a      	ldr	r2, [pc, #552]	; (8000f64 <controlButton+0x508>)
 8000d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d40:	1092      	asrs	r2, r2, #2
 8000d42:	17db      	asrs	r3, r3, #31
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	4a88      	ldr	r2, [pc, #544]	; (8000f68 <controlButton+0x50c>)
 8000d48:	6013      	str	r3, [r2, #0]
		dvi = (timeyellow/1000 + increaseYellow)%10;
 8000d4a:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <controlButton+0x500>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a84      	ldr	r2, [pc, #528]	; (8000f60 <controlButton+0x504>)
 8000d50:	fb82 1203 	smull	r1, r2, r2, r3
 8000d54:	1192      	asrs	r2, r2, #6
 8000d56:	17db      	asrs	r3, r3, #31
 8000d58:	1ad2      	subs	r2, r2, r3
 8000d5a:	4b7f      	ldr	r3, [pc, #508]	; (8000f58 <controlButton+0x4fc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	18d1      	adds	r1, r2, r3
 8000d60:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <controlButton+0x508>)
 8000d62:	fb83 2301 	smull	r2, r3, r3, r1
 8000d66:	109a      	asrs	r2, r3, #2
 8000d68:	17cb      	asrs	r3, r1, #31
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	1aca      	subs	r2, r1, r3
 8000d76:	4b7d      	ldr	r3, [pc, #500]	; (8000f6c <controlButton+0x510>)
 8000d78:	601a      	str	r2, [r3, #0]

		if(index_led == 0)
 8000d7a:	4b7d      	ldr	r3, [pc, #500]	; (8000f70 <controlButton+0x514>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <controlButton+0x346>
		{
			display7SEG_2(chuc);
 8000d82:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <controlButton+0x50c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fc22 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 off
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2104      	movs	r1, #4
 8000d90:	486f      	ldr	r0, [pc, #444]	; (8000f50 <controlButton+0x4f4>)
 8000d92:	f001 f8ee 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 on
 8000d96:	2201      	movs	r2, #1
 8000d98:	2108      	movs	r1, #8
 8000d9a:	486d      	ldr	r0, [pc, #436]	; (8000f50 <controlButton+0x4f4>)
 8000d9c:	f001 f8e9 	bl	8001f72 <HAL_GPIO_WritePin>
 8000da0:	e00e      	b.n	8000dc0 <controlButton+0x364>
		}
		else
		{
			display7SEG_2(dvi);
 8000da2:	4b72      	ldr	r3, [pc, #456]	; (8000f6c <controlButton+0x510>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fc12 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 on
 8000dac:	2201      	movs	r2, #1
 8000dae:	2104      	movs	r1, #4
 8000db0:	4867      	ldr	r0, [pc, #412]	; (8000f50 <controlButton+0x4f4>)
 8000db2:	f001 f8de 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 off
 8000db6:	2200      	movs	r2, #0
 8000db8:	2108      	movs	r1, #8
 8000dba:	4865      	ldr	r0, [pc, #404]	; (8000f50 <controlButton+0x4f4>)
 8000dbc:	f001 f8d9 	bl	8001f72 <HAL_GPIO_WritePin>
		}

		////// PRESS BUTTON 3 /////////
		if(isButtonNPressed(2) == 1)
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff f9c3 	bl	800014c <isButtonNPressed>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f040 80bc 	bne.w	8000f46 <controlButton+0x4ea>
		{
			timeyellow += increaseYellow*1000;
 8000dce:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <controlButton+0x4fc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd6:	fb03 f202 	mul.w	r2, r3, r2
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <controlButton+0x500>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a5e      	ldr	r2, [pc, #376]	; (8000f5c <controlButton+0x500>)
 8000de2:	6013      	str	r3, [r2, #0]
			increaseYellow = 0;
 8000de4:	4b5c      	ldr	r3, [pc, #368]	; (8000f58 <controlButton+0x4fc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dea:	e0ac      	b.n	8000f46 <controlButton+0x4ea>
	case 4:			// increase time duration GREEN
		////// // led RED BLINK //////////
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);		// yellow 1 off
 8000dec:	2201      	movs	r2, #1
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4857      	ldr	r0, [pc, #348]	; (8000f50 <controlButton+0x4f4>)
 8000df2:	f001 f8be 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);		// yellow 2 off
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfc:	4854      	ldr	r0, [pc, #336]	; (8000f50 <controlButton+0x4f4>)
 8000dfe:	f001 f8b8 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);		// red 1 off
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	4852      	ldr	r0, [pc, #328]	; (8000f50 <controlButton+0x4f4>)
 8000e08:	f001 f8b3 	bl	8001f72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);		// red 2 off
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e12:	484f      	ldr	r0, [pc, #316]	; (8000f50 <controlButton+0x4f4>)
 8000e14:	f001 f8ad 	bl	8001f72 <HAL_GPIO_WritePin>

		if(timer6_flag == 1)
 8000e18:	4b4e      	ldr	r3, [pc, #312]	; (8000f54 <controlButton+0x4f8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d10c      	bne.n	8000e3a <controlButton+0x3de>
		{
			setTimer6(500);
 8000e20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e24:	f000 fc66 	bl	80016f4 <setTimer6>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	4849      	ldr	r0, [pc, #292]	; (8000f50 <controlButton+0x4f4>)
 8000e2c:	f001 f8b9 	bl	8001fa2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	4846      	ldr	r0, [pc, #280]	; (8000f50 <controlButton+0x4f4>)
 8000e36:	f001 f8b4 	bl	8001fa2 <HAL_GPIO_TogglePin>
		}

		//// PRESS BUTTON 2 ///////
		if(isButtonNPressed(1) == 1)
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff f986 	bl	800014c <isButtonNPressed>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d118      	bne.n	8000e78 <controlButton+0x41c>
		{
			increaseGreen++;
 8000e46:	4b4b      	ldr	r3, [pc, #300]	; (8000f74 <controlButton+0x518>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <controlButton+0x518>)
 8000e4e:	6013      	str	r3, [r2, #0]

			if((timegreen/1000 + increaseGreen) > 99)
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <controlButton+0x51c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a42      	ldr	r2, [pc, #264]	; (8000f60 <controlButton+0x504>)
 8000e56:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5a:	1192      	asrs	r2, r2, #6
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <controlButton+0x518>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	2b63      	cmp	r3, #99	; 0x63
 8000e68:	dd06      	ble.n	8000e78 <controlButton+0x41c>
			{
				timegreen = 1000;
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <controlButton+0x51c>)
 8000e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e70:	601a      	str	r2, [r3, #0]
				increaseGreen = 0;
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <controlButton+0x518>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
			}
		}

		////// DISPLAY VALUE  /////////
		chuc = (timegreen/1000 + increaseGreen)/10;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <controlButton+0x51c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a38      	ldr	r2, [pc, #224]	; (8000f60 <controlButton+0x504>)
 8000e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e82:	1192      	asrs	r2, r2, #6
 8000e84:	17db      	asrs	r3, r3, #31
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <controlButton+0x518>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a35      	ldr	r2, [pc, #212]	; (8000f64 <controlButton+0x508>)
 8000e90:	fb82 1203 	smull	r1, r2, r2, r3
 8000e94:	1092      	asrs	r2, r2, #2
 8000e96:	17db      	asrs	r3, r3, #31
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	4a33      	ldr	r2, [pc, #204]	; (8000f68 <controlButton+0x50c>)
 8000e9c:	6013      	str	r3, [r2, #0]
		dvi = (timegreen/1000 + increaseGreen)%10;
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <controlButton+0x51c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a2f      	ldr	r2, [pc, #188]	; (8000f60 <controlButton+0x504>)
 8000ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea8:	1192      	asrs	r2, r2, #6
 8000eaa:	17db      	asrs	r3, r3, #31
 8000eac:	1ad2      	subs	r2, r2, r3
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <controlButton+0x518>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	18d1      	adds	r1, r2, r3
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <controlButton+0x508>)
 8000eb6:	fb83 2301 	smull	r2, r3, r3, r1
 8000eba:	109a      	asrs	r2, r3, #2
 8000ebc:	17cb      	asrs	r3, r1, #31
 8000ebe:	1ad2      	subs	r2, r2, r3
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	1aca      	subs	r2, r1, r3
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <controlButton+0x510>)
 8000ecc:	601a      	str	r2, [r3, #0]

		if(index_led == 0)
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <controlButton+0x514>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10f      	bne.n	8000ef6 <controlButton+0x49a>
		{
			display7SEG_2(chuc);
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <controlButton+0x50c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb78 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 off
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <controlButton+0x4f4>)
 8000ee6:	f001 f844 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 on
 8000eea:	2201      	movs	r2, #1
 8000eec:	2108      	movs	r1, #8
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <controlButton+0x4f4>)
 8000ef0:	f001 f83f 	bl	8001f72 <HAL_GPIO_WritePin>
 8000ef4:	e00e      	b.n	8000f14 <controlButton+0x4b8>
		}
		else
		{
			display7SEG_2(dvi);
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <controlButton+0x510>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fb68 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 on
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	4812      	ldr	r0, [pc, #72]	; (8000f50 <controlButton+0x4f4>)
 8000f06:	f001 f834 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 off
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4810      	ldr	r0, [pc, #64]	; (8000f50 <controlButton+0x4f4>)
 8000f10:	f001 f82f 	bl	8001f72 <HAL_GPIO_WritePin>
		}

		////// PRESS BUTTON 3 /////////
		if(isButtonNPressed(2) == 1)
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff f919 	bl	800014c <isButtonNPressed>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d114      	bne.n	8000f4a <controlButton+0x4ee>
		{
			timegreen += increaseGreen*1000;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <controlButton+0x518>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f28:	fb03 f202 	mul.w	r2, r3, r2
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <controlButton+0x51c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <controlButton+0x51c>)
 8000f34:	6013      	str	r3, [r2, #0]
			increaseGreen = 0;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <controlButton+0x518>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f3c:	e005      	b.n	8000f4a <controlButton+0x4ee>
	default:
		break;
 8000f3e:	bf00      	nop
 8000f40:	e004      	b.n	8000f4c <controlButton+0x4f0>
		break;
 8000f42:	bf00      	nop
 8000f44:	e002      	b.n	8000f4c <controlButton+0x4f0>
		break;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <controlButton+0x4f0>
		break;
 8000f4a:	bf00      	nop
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40010800 	.word	0x40010800
 8000f54:	20000138 	.word	0x20000138
 8000f58:	200000b8 	.word	0x200000b8
 8000f5c:	20000058 	.word	0x20000058
 8000f60:	10624dd3 	.word	0x10624dd3
 8000f64:	66666667 	.word	0x66666667
 8000f68:	200000c0 	.word	0x200000c0
 8000f6c:	200000c4 	.word	0x200000c4
 8000f70:	200000b0 	.word	0x200000b0
 8000f74:	200000bc 	.word	0x200000bc
 8000f78:	20000054 	.word	0x20000054

08000f7c <fsm_automatic_1_run>:

void fsm_automatic_1_run()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	if(isButtonNPressed(0) == 1)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff f8e3 	bl	800014c <isButtonNPressed>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d104      	bne.n	8000f96 <fsm_automatic_1_run+0x1a>
		mode++;
 8000f8c:	4b76      	ldr	r3, [pc, #472]	; (8001168 <fsm_automatic_1_run+0x1ec>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a75      	ldr	r2, [pc, #468]	; (8001168 <fsm_automatic_1_run+0x1ec>)
 8000f94:	6013      	str	r3, [r2, #0]

	if(mode == 1)	///// STATE NORMAL
 8000f96:	4b74      	ldr	r3, [pc, #464]	; (8001168 <fsm_automatic_1_run+0x1ec>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	f040 80de 	bne.w	800115c <fsm_automatic_1_run+0x1e0>
	{
		switch(status_1)
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <fsm_automatic_1_run+0x1f0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	f200 80a7 	bhi.w	80010fa <fsm_automatic_1_run+0x17e>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <fsm_automatic_1_run+0x38>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08001011 	.word	0x08001011
 8000fbc:	0800105f 	.word	0x0800105f
 8000fc0:	080010ad 	.word	0x080010ad
		{
		case INIT_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	4869      	ldr	r0, [pc, #420]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8000fca:	f000 ffd2 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	4867      	ldr	r0, [pc, #412]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8000fd4:	f000 ffcd 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	4864      	ldr	r0, [pc, #400]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8000fde:	f000 ffc8 	bl	8001f72 <HAL_GPIO_WritePin>

			status_1 = AUTO_RED_1;
 8000fe2:	4b62      	ldr	r3, [pc, #392]	; (800116c <fsm_automatic_1_run+0x1f0>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	601a      	str	r2, [r3, #0]
			setTimer1(timered);
 8000fe8:	4b62      	ldr	r3, [pc, #392]	; (8001174 <fsm_automatic_1_run+0x1f8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 faff 	bl	80015f0 <setTimer1>

			setTimer3(1000);
 8000ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff6:	f000 fb2f 	bl	8001658 <setTimer3>
			count1 = timered / 1000;
 8000ffa:	4b5e      	ldr	r3, [pc, #376]	; (8001174 <fsm_automatic_1_run+0x1f8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <fsm_automatic_1_run+0x1fc>)
 8001000:	fb82 1203 	smull	r1, r2, r2, r3
 8001004:	1192      	asrs	r2, r2, #6
 8001006:	17db      	asrs	r3, r3, #31
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	4a5c      	ldr	r2, [pc, #368]	; (800117c <fsm_automatic_1_run+0x200>)
 800100c:	6013      	str	r3, [r2, #0]
			break;
 800100e:	e07b      	b.n	8001108 <fsm_automatic_1_run+0x18c>
		case AUTO_RED_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2120      	movs	r1, #32
 8001014:	4856      	ldr	r0, [pc, #344]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8001016:	f000 ffac 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);
 800101a:	2201      	movs	r2, #1
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4854      	ldr	r0, [pc, #336]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8001020:	f000 ffa7 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4851      	ldr	r0, [pc, #324]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 800102a:	f000 ffa2 	bl	8001f72 <HAL_GPIO_WritePin>

			if(timer1_flag == 1)
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <fsm_automatic_1_run+0x204>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d163      	bne.n	80010fe <fsm_automatic_1_run+0x182>
			{
				setTimer1(timegreen);
 8001036:	4b53      	ldr	r3, [pc, #332]	; (8001184 <fsm_automatic_1_run+0x208>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fad8 	bl	80015f0 <setTimer1>
				count1 = timegreen/1000 + 1;
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <fsm_automatic_1_run+0x208>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <fsm_automatic_1_run+0x1fc>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	1192      	asrs	r2, r2, #6
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	3301      	adds	r3, #1
 8001052:	4a4a      	ldr	r2, [pc, #296]	; (800117c <fsm_automatic_1_run+0x200>)
 8001054:	6013      	str	r3, [r2, #0]
				status_1 = AUTO_GREEN_1;
 8001056:	4b45      	ldr	r3, [pc, #276]	; (800116c <fsm_automatic_1_run+0x1f0>)
 8001058:	2203      	movs	r2, #3
 800105a:	601a      	str	r2, [r3, #0]
			}
			break;
 800105c:	e04f      	b.n	80010fe <fsm_automatic_1_run+0x182>
		case AUTO_GREEN_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2120      	movs	r1, #32
 8001062:	4843      	ldr	r0, [pc, #268]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8001064:	f000 ff85 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	4840      	ldr	r0, [pc, #256]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 800106e:	f000 ff80 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);
 8001072:	2201      	movs	r2, #1
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	483e      	ldr	r0, [pc, #248]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8001078:	f000 ff7b 	bl	8001f72 <HAL_GPIO_WritePin>

			if(timer1_flag == 1)
 800107c:	4b40      	ldr	r3, [pc, #256]	; (8001180 <fsm_automatic_1_run+0x204>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d13e      	bne.n	8001102 <fsm_automatic_1_run+0x186>
			{
				setTimer1(timeyellow);
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <fsm_automatic_1_run+0x20c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fab1 	bl	80015f0 <setTimer1>
				count1 = timeyellow/1000 + 1;
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <fsm_automatic_1_run+0x20c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a39      	ldr	r2, [pc, #228]	; (8001178 <fsm_automatic_1_run+0x1fc>)
 8001094:	fb82 1203 	smull	r1, r2, r2, r3
 8001098:	1192      	asrs	r2, r2, #6
 800109a:	17db      	asrs	r3, r3, #31
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	4a36      	ldr	r2, [pc, #216]	; (800117c <fsm_automatic_1_run+0x200>)
 80010a2:	6013      	str	r3, [r2, #0]
				status_1 = AUTO_YELLOW_1;
 80010a4:	4b31      	ldr	r3, [pc, #196]	; (800116c <fsm_automatic_1_run+0x1f0>)
 80010a6:	2204      	movs	r2, #4
 80010a8:	601a      	str	r2, [r3, #0]
			}
			break;
 80010aa:	e02a      	b.n	8001102 <fsm_automatic_1_run+0x186>
		case AUTO_YELLOW_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	482f      	ldr	r0, [pc, #188]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 80010b2:	f000 ff5e 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	482d      	ldr	r0, [pc, #180]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 80010bc:	f000 ff59 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	482a      	ldr	r0, [pc, #168]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 80010c6:	f000 ff54 	bl	8001f72 <HAL_GPIO_WritePin>

			if(timer1_flag == 1)
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <fsm_automatic_1_run+0x204>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d119      	bne.n	8001106 <fsm_automatic_1_run+0x18a>
			{
				setTimer1(timered);
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <fsm_automatic_1_run+0x1f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fa8a 	bl	80015f0 <setTimer1>
				count1 = timered/1000 + 1;
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <fsm_automatic_1_run+0x1f8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <fsm_automatic_1_run+0x1fc>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1192      	asrs	r2, r2, #6
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <fsm_automatic_1_run+0x200>)
 80010f0:	6013      	str	r3, [r2, #0]
				status_1 = AUTO_RED_1;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <fsm_automatic_1_run+0x1f0>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80010f8:	e005      	b.n	8001106 <fsm_automatic_1_run+0x18a>
		default:
			break;
 80010fa:	bf00      	nop
 80010fc:	e004      	b.n	8001108 <fsm_automatic_1_run+0x18c>
			break;
 80010fe:	bf00      	nop
 8001100:	e002      	b.n	8001108 <fsm_automatic_1_run+0x18c>
			break;
 8001102:	bf00      	nop
 8001104:	e000      	b.n	8001108 <fsm_automatic_1_run+0x18c>
			break;
 8001106:	bf00      	nop
		}

		subcount1();
 8001108:	f7ff fc28 	bl	800095c <subcount1>
		update();
 800110c:	f7ff fc8a 	bl	8000a24 <update>

		if(index_led == 0)
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <fsm_automatic_1_run+0x210>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d110      	bne.n	800113a <fsm_automatic_1_run+0x1be>
		{
			display7SEG_1(count[1]);
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <fsm_automatic_1_run+0x214>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f8d1 	bl	80002c4 <display7SEG_1>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);	// seg 1 off
 8001122:	2201      	movs	r2, #1
 8001124:	2110      	movs	r1, #16
 8001126:	4812      	ldr	r0, [pc, #72]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8001128:	f000 ff23 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);	// seg 2 on
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8001134:	f000 ff1d 	bl	8001f72 <HAL_GPIO_WritePin>
	else
	{
		update();
		controlButton();
	}
}
 8001138:	e014      	b.n	8001164 <fsm_automatic_1_run+0x1e8>
			display7SEG_1(count[0]);
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <fsm_automatic_1_run+0x214>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f8c0 	bl	80002c4 <display7SEG_1>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);	// seg 1 on
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 800114a:	f000 ff12 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);	// seg 2 off
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <fsm_automatic_1_run+0x1f4>)
 8001156:	f000 ff0c 	bl	8001f72 <HAL_GPIO_WritePin>
}
 800115a:	e003      	b.n	8001164 <fsm_automatic_1_run+0x1e8>
		update();
 800115c:	f7ff fc62 	bl	8000a24 <update>
		controlButton();
 8001160:	f7ff fc7c 	bl	8000a5c <controlButton>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000006c 	.word	0x2000006c
 800116c:	20000070 	.word	0x20000070
 8001170:	40010800 	.word	0x40010800
 8001174:	20000050 	.word	0x20000050
 8001178:	10624dd3 	.word	0x10624dd3
 800117c:	20000048 	.word	0x20000048
 8001180:	20000110 	.word	0x20000110
 8001184:	20000054 	.word	0x20000054
 8001188:	20000058 	.word	0x20000058
 800118c:	200000b0 	.word	0x200000b0
 8001190:	2000005c 	.word	0x2000005c

08001194 <fsm_automatic_2_run>:

void fsm_automatic_2_run()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	if(mode == 1)
 8001198:	4b77      	ldr	r3, [pc, #476]	; (8001378 <fsm_automatic_2_run+0x1e4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	f040 80e9 	bne.w	8001374 <fsm_automatic_2_run+0x1e0>
	{
		switch(status_2)
 80011a2:	4b76      	ldr	r3, [pc, #472]	; (800137c <fsm_automatic_2_run+0x1e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	f200 80b5 	bhi.w	8001318 <fsm_automatic_2_run+0x184>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <fsm_automatic_2_run+0x20>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	0800121d 	.word	0x0800121d
 80011bc:	08001271 	.word	0x08001271
 80011c0:	080012c5 	.word	0x080012c5
		{
		case INIT_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	486d      	ldr	r0, [pc, #436]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 80011cc:	f000 fed1 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	486a      	ldr	r0, [pc, #424]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 80011d8:	f000 fecb 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e2:	4867      	ldr	r0, [pc, #412]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 80011e4:	f000 fec5 	bl	8001f72 <HAL_GPIO_WritePin>

			status_2 = AUTO_GREEN_2;
 80011e8:	4b64      	ldr	r3, [pc, #400]	; (800137c <fsm_automatic_2_run+0x1e8>)
 80011ea:	2203      	movs	r2, #3
 80011ec:	601a      	str	r2, [r3, #0]
			setTimer2(timegreen);
 80011ee:	4b65      	ldr	r3, [pc, #404]	; (8001384 <fsm_automatic_2_run+0x1f0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fa16 	bl	8001624 <setTimer2>

			setTimer4(1000);
 80011f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fc:	f000 fa46 	bl	800168c <setTimer4>
			count2 = timegreen/1000;
 8001200:	4b60      	ldr	r3, [pc, #384]	; (8001384 <fsm_automatic_2_run+0x1f0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a60      	ldr	r2, [pc, #384]	; (8001388 <fsm_automatic_2_run+0x1f4>)
 8001206:	fb82 1203 	smull	r1, r2, r2, r3
 800120a:	1192      	asrs	r2, r2, #6
 800120c:	17db      	asrs	r3, r3, #31
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	4a5e      	ldr	r2, [pc, #376]	; (800138c <fsm_automatic_2_run+0x1f8>)
 8001212:	6013      	str	r3, [r2, #0]

			isButtonNPressed(0);
 8001214:	2000      	movs	r0, #0
 8001216:	f7fe ff99 	bl	800014c <isButtonNPressed>
			break;
 800121a:	e084      	b.n	8001326 <fsm_automatic_2_run+0x192>
		case AUTO_RED_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001222:	4857      	ldr	r0, [pc, #348]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001224:	f000 fea5 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122e:	4854      	ldr	r0, [pc, #336]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001230:	f000 fe9f 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123a:	4851      	ldr	r0, [pc, #324]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 800123c:	f000 fe99 	bl	8001f72 <HAL_GPIO_WritePin>

			if(timer2_flag == 1)
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <fsm_automatic_2_run+0x1fc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d169      	bne.n	800131c <fsm_automatic_2_run+0x188>
			{
				setTimer2(timegreen);
 8001248:	4b4e      	ldr	r3, [pc, #312]	; (8001384 <fsm_automatic_2_run+0x1f0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f9e9 	bl	8001624 <setTimer2>
				count2 = timegreen/1000 + 1;
 8001252:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <fsm_automatic_2_run+0x1f0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <fsm_automatic_2_run+0x1f4>)
 8001258:	fb82 1203 	smull	r1, r2, r2, r3
 800125c:	1192      	asrs	r2, r2, #6
 800125e:	17db      	asrs	r3, r3, #31
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	3301      	adds	r3, #1
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <fsm_automatic_2_run+0x1f8>)
 8001266:	6013      	str	r3, [r2, #0]
				status_2 = AUTO_GREEN_2;
 8001268:	4b44      	ldr	r3, [pc, #272]	; (800137c <fsm_automatic_2_run+0x1e8>)
 800126a:	2203      	movs	r2, #3
 800126c:	601a      	str	r2, [r3, #0]
			}
			break;
 800126e:	e055      	b.n	800131c <fsm_automatic_2_run+0x188>
		case AUTO_GREEN_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001276:	4842      	ldr	r0, [pc, #264]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001278:	f000 fe7b 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	483f      	ldr	r0, [pc, #252]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001284:	f000 fe75 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128e:	483c      	ldr	r0, [pc, #240]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001290:	f000 fe6f 	bl	8001f72 <HAL_GPIO_WritePin>

			if(timer2_flag == 1)
 8001294:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <fsm_automatic_2_run+0x1fc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d141      	bne.n	8001320 <fsm_automatic_2_run+0x18c>
			{
				setTimer2(timeyellow);
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <fsm_automatic_2_run+0x200>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f9bf 	bl	8001624 <setTimer2>
				count2 = timeyellow/1000 + 1;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <fsm_automatic_2_run+0x200>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a37      	ldr	r2, [pc, #220]	; (8001388 <fsm_automatic_2_run+0x1f4>)
 80012ac:	fb82 1203 	smull	r1, r2, r2, r3
 80012b0:	1192      	asrs	r2, r2, #6
 80012b2:	17db      	asrs	r3, r3, #31
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a34      	ldr	r2, [pc, #208]	; (800138c <fsm_automatic_2_run+0x1f8>)
 80012ba:	6013      	str	r3, [r2, #0]
				status_2 = AUTO_YELLOW_2;
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <fsm_automatic_2_run+0x1e8>)
 80012be:	2204      	movs	r2, #4
 80012c0:	601a      	str	r2, [r3, #0]
			}
			break;
 80012c2:	e02d      	b.n	8001320 <fsm_automatic_2_run+0x18c>
		case AUTO_YELLOW_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ca:	482d      	ldr	r0, [pc, #180]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 80012cc:	f000 fe51 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d6:	482a      	ldr	r0, [pc, #168]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 80012d8:	f000 fe4b 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 80012e4:	f000 fe45 	bl	8001f72 <HAL_GPIO_WritePin>

			if(timer2_flag == 1)
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <fsm_automatic_2_run+0x1fc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d119      	bne.n	8001324 <fsm_automatic_2_run+0x190>
			{
				setTimer2(timered);
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <fsm_automatic_2_run+0x204>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f995 	bl	8001624 <setTimer2>
				count2 = timered/1000 + 1;
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <fsm_automatic_2_run+0x204>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a22      	ldr	r2, [pc, #136]	; (8001388 <fsm_automatic_2_run+0x1f4>)
 8001300:	fb82 1203 	smull	r1, r2, r2, r3
 8001304:	1192      	asrs	r2, r2, #6
 8001306:	17db      	asrs	r3, r3, #31
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	3301      	adds	r3, #1
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <fsm_automatic_2_run+0x1f8>)
 800130e:	6013      	str	r3, [r2, #0]
				status_2 = AUTO_RED_2;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <fsm_automatic_2_run+0x1e8>)
 8001312:	2202      	movs	r2, #2
 8001314:	601a      	str	r2, [r3, #0]
			}
			break;
 8001316:	e005      	b.n	8001324 <fsm_automatic_2_run+0x190>
		default:
			break;
 8001318:	bf00      	nop
 800131a:	e004      	b.n	8001326 <fsm_automatic_2_run+0x192>
			break;
 800131c:	bf00      	nop
 800131e:	e002      	b.n	8001326 <fsm_automatic_2_run+0x192>
			break;
 8001320:	bf00      	nop
 8001322:	e000      	b.n	8001326 <fsm_automatic_2_run+0x192>
			break;
 8001324:	bf00      	nop
		}

		subcount2();
 8001326:	f7ff fb4b 	bl	80009c0 <subcount2>
		update();
 800132a:	f7ff fb7b 	bl	8000a24 <update>

		if(index_led == 0)
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <fsm_automatic_2_run+0x208>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <fsm_automatic_2_run+0x1c2>
		{
			display7SEG_2(count[3]);
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <fsm_automatic_2_run+0x20c>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f948 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 off
 8001340:	2201      	movs	r2, #1
 8001342:	2104      	movs	r1, #4
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001346:	f000 fe14 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 on
 800134a:	2200      	movs	r2, #0
 800134c:	2108      	movs	r1, #8
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001350:	f000 fe0f 	bl	8001f72 <HAL_GPIO_WritePin>
			display7SEG_2(count[2]);
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 on
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 off
		}
	}
}
 8001354:	e00e      	b.n	8001374 <fsm_automatic_2_run+0x1e0>
			display7SEG_2(count[2]);
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <fsm_automatic_2_run+0x20c>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f938 	bl	80005d0 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 on
 8001360:	2200      	movs	r2, #0
 8001362:	2104      	movs	r1, #4
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001366:	f000 fe04 	bl	8001f72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 off
 800136a:	2201      	movs	r2, #1
 800136c:	2108      	movs	r1, #8
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <fsm_automatic_2_run+0x1ec>)
 8001370:	f000 fdff 	bl	8001f72 <HAL_GPIO_WritePin>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000006c 	.word	0x2000006c
 800137c:	20000074 	.word	0x20000074
 8001380:	40010800 	.word	0x40010800
 8001384:	20000054 	.word	0x20000054
 8001388:	10624dd3 	.word	0x10624dd3
 800138c:	2000004c 	.word	0x2000004c
 8001390:	20000118 	.word	0x20000118
 8001394:	20000058 	.word	0x20000058
 8001398:	20000050 	.word	0x20000050
 800139c:	200000b0 	.word	0x200000b0
 80013a0:	2000005c 	.word	0x2000005c

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f000 fae0 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f822 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f000 f8a8 	bl	8001504 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013b4:	f000 f85a 	bl	800146c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <main+0x3c>)
 80013ba:	f001 fa43 	bl	8002844 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  timer5_flag = 1;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <main+0x40>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
  timer6_flag = 1;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <main+0x44>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

  status_1 = INIT_1;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <main+0x48>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
  status_2 = INIT_2;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <main+0x4c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_1_run();
 80013d6:	f7ff fdd1 	bl	8000f7c <fsm_automatic_1_run>
	  fsm_automatic_2_run();
 80013da:	f7ff fedb 	bl	8001194 <fsm_automatic_2_run>
	  fsm_automatic_1_run();
 80013de:	e7fa      	b.n	80013d6 <main+0x32>
 80013e0:	200000c8 	.word	0x200000c8
 80013e4:	20000130 	.word	0x20000130
 80013e8:	20000138 	.word	0x20000138
 80013ec:	20000070 	.word	0x20000070
 80013f0:	20000074 	.word	0x20000074

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b090      	sub	sp, #64	; 0x40
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	2228      	movs	r2, #40	; 0x28
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fdd6 	bl	8002fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141a:	2301      	movs	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141e:	2310      	movs	r3, #16
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fdd2 	bl	8001fd4 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001436:	f000 f8d5 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f001 f840 	bl	80024d8 <HAL_RCC_ClockConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800145e:	f000 f8c1 	bl	80015e4 <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	3740      	adds	r7, #64	; 0x40
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_TIM2_Init+0x94>)
 800148a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_TIM2_Init+0x94>)
 8001492:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001496:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_TIM2_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_TIM2_Init+0x94>)
 80014a0:	220a      	movs	r2, #10
 80014a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_TIM2_Init+0x94>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_TIM2_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_TIM2_Init+0x94>)
 80014b2:	f001 f977 	bl	80027a4 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014bc:	f000 f892 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_TIM2_Init+0x94>)
 80014ce:	f001 fb0d 	bl	8002aec <HAL_TIM_ConfigClockSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014d8:	f000 f884 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_TIM2_Init+0x94>)
 80014ea:	f001 fcd5 	bl	8002e98 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f000 f876 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000c8 	.word	0x200000c8

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <MX_GPIO_Init+0xbc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <MX_GPIO_Init+0xbc>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <MX_GPIO_Init+0xbc>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <MX_GPIO_Init+0xbc>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <MX_GPIO_Init+0xbc>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_GPIO_Init+0xbc>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|RED_1_Pin
 8001548:	2200      	movs	r2, #0
 800154a:	f640 71fc 	movw	r1, #4092	; 0xffc
 800154e:	481d      	ldr	r0, [pc, #116]	; (80015c4 <MX_GPIO_Init+0xc0>)
 8001550:	f000 fd0f 	bl	8001f72 <HAL_GPIO_WritePin>
                          |YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin|YELLOW_2_Pin
                          |GREEN_2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D2_Pin
 8001554:	2200      	movs	r2, #0
 8001556:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800155a:	481b      	ldr	r0, [pc, #108]	; (80015c8 <MX_GPIO_Init+0xc4>)
 800155c:	f000 fd09 	bl	8001f72 <HAL_GPIO_WritePin>
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin RED_1_Pin
                           YELLOW_1_Pin GREEN_1_Pin RED_2_Pin YELLOW_2_Pin
                           GREEN_2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|RED_1_Pin
 8001560:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001564:	60bb      	str	r3, [r7, #8]
                          |YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin|YELLOW_2_Pin
                          |GREEN_2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2302      	movs	r3, #2
 8001570:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4619      	mov	r1, r3
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <MX_GPIO_Init+0xc0>)
 800157a:	f000 fb67 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D_Pin
                           E_Pin F_Pin G_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D2_Pin
 800157e:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001582:	60bb      	str	r3, [r7, #8]
                          |E2_Pin|F2_Pin|G2_Pin|D_Pin
                          |E_Pin|F_Pin|G_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2302      	movs	r3, #2
 800158e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4619      	mov	r1, r3
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_GPIO_Init+0xc4>)
 8001598:	f000 fb58 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800159c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4619      	mov	r1, r3
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_GPIO_Init+0xc0>)
 80015b2:	f000 fb4b 	bl	8001c4c <HAL_GPIO_Init>

}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	40010c00 	.word	0x40010c00

080015cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	timeRun();
 80015d4:	f000 f8a8 	bl	8001728 <timeRun>
	getKeyInput();
 80015d8:	f7fe fde2 	bl	80001a0 <getKeyInput>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <setTimer1>:
int timer6_counter = 0;

int TIMER_CYCLE = 10;

void setTimer1(int duration)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <setTimer1+0x28>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <setTimer1+0x2c>)
 8001604:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <setTimer1+0x30>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000078 	.word	0x20000078
 800161c:	20000114 	.word	0x20000114
 8001620:	20000110 	.word	0x20000110

08001624 <setTimer2>:

void setTimer2(int duration)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <setTimer2+0x28>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	fb92 f3f3 	sdiv	r3, r2, r3
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <setTimer2+0x2c>)
 8001638:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <setTimer2+0x30>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000078 	.word	0x20000078
 8001650:	2000011c 	.word	0x2000011c
 8001654:	20000118 	.word	0x20000118

08001658 <setTimer3>:

void setTimer3(int duration)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <setTimer3+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	fb92 f3f3 	sdiv	r3, r2, r3
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <setTimer3+0x2c>)
 800166c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <setTimer3+0x30>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000078 	.word	0x20000078
 8001684:	20000124 	.word	0x20000124
 8001688:	20000120 	.word	0x20000120

0800168c <setTimer4>:

void setTimer4(int duration)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <setTimer4+0x28>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	fb92 f3f3 	sdiv	r3, r2, r3
 800169e:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <setTimer4+0x2c>)
 80016a0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <setTimer4+0x30>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000078 	.word	0x20000078
 80016b8:	2000012c 	.word	0x2000012c
 80016bc:	20000128 	.word	0x20000128

080016c0 <setTimer5>:

void setTimer5(int duration)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <setTimer5+0x28>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d2:	4a06      	ldr	r2, [pc, #24]	; (80016ec <setTimer5+0x2c>)
 80016d4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <setTimer5+0x30>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000078 	.word	0x20000078
 80016ec:	20000134 	.word	0x20000134
 80016f0:	20000130 	.word	0x20000130

080016f4 <setTimer6>:

void setTimer6(int duration)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <setTimer6+0x28>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb92 f3f3 	sdiv	r3, r2, r3
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <setTimer6+0x2c>)
 8001708:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <setTimer6+0x30>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000078 	.word	0x20000078
 8001720:	2000013c 	.word	0x2000013c
 8001724:	20000138 	.word	0x20000138

08001728 <timeRun>:

void timeRun()
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 800172c:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <timeRun+0xcc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	dd0b      	ble.n	800174c <timeRun+0x24>
	{
		timer1_counter--;
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <timeRun+0xcc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	4a2e      	ldr	r2, [pc, #184]	; (80017f4 <timeRun+0xcc>)
 800173c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <timeRun+0xcc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dc02      	bgt.n	800174c <timeRun+0x24>
			timer1_flag = 1;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <timeRun+0xd0>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0)
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <timeRun+0xd4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	dd0b      	ble.n	800176c <timeRun+0x44>
	{
		timer2_counter--;
 8001754:	4b29      	ldr	r3, [pc, #164]	; (80017fc <timeRun+0xd4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3b01      	subs	r3, #1
 800175a:	4a28      	ldr	r2, [pc, #160]	; (80017fc <timeRun+0xd4>)
 800175c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <timeRun+0xd4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	dc02      	bgt.n	800176c <timeRun+0x44>
			timer2_flag = 1;
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <timeRun+0xd8>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0)
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <timeRun+0xdc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	dd0b      	ble.n	800178c <timeRun+0x64>
	{
		timer3_counter--;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <timeRun+0xdc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3b01      	subs	r3, #1
 800177a:	4a22      	ldr	r2, [pc, #136]	; (8001804 <timeRun+0xdc>)
 800177c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <timeRun+0xdc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	dc02      	bgt.n	800178c <timeRun+0x64>
			timer3_flag = 1;
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <timeRun+0xe0>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0)
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <timeRun+0xe4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dd0b      	ble.n	80017ac <timeRun+0x84>
	{
		timer4_counter--;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <timeRun+0xe4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <timeRun+0xe4>)
 800179c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <timeRun+0xe4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dc02      	bgt.n	80017ac <timeRun+0x84>
			timer4_flag = 1;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <timeRun+0xe8>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0)
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <timeRun+0xec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	dd0b      	ble.n	80017cc <timeRun+0xa4>
	{
		timer5_counter--;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <timeRun+0xec>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <timeRun+0xec>)
 80017bc:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <timeRun+0xec>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	dc02      	bgt.n	80017cc <timeRun+0xa4>
			timer5_flag = 1;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <timeRun+0xf0>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <timeRun+0xf4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dd0b      	ble.n	80017ec <timeRun+0xc4>
	{
		timer6_counter--;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <timeRun+0xf4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <timeRun+0xf4>)
 80017dc:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0)
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <timeRun+0xf4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc02      	bgt.n	80017ec <timeRun+0xc4>
			timer6_flag = 1;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <timeRun+0xf8>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
	}
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000114 	.word	0x20000114
 80017f8:	20000110 	.word	0x20000110
 80017fc:	2000011c 	.word	0x2000011c
 8001800:	20000118 	.word	0x20000118
 8001804:	20000124 	.word	0x20000124
 8001808:	20000120 	.word	0x20000120
 800180c:	2000012c 	.word	0x2000012c
 8001810:	20000128 	.word	0x20000128
 8001814:	20000134 	.word	0x20000134
 8001818:	20000130 	.word	0x20000130
 800181c:	2000013c 	.word	0x2000013c
 8001820:	20000138 	.word	0x20000138

08001824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_MspInit+0x40>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_MspInit+0x40>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6193      	str	r3, [r2, #24]
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_MspInit+0x40>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_MspInit+0x40>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_MspInit+0x40>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_MspInit+0x40>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d113      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_TIM_Base_MspInit+0x44>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_TIM_Base_MspInit+0x44>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_TIM_Base_MspInit+0x44>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	201c      	movs	r0, #28
 8001898:	f000 f9a1 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800189c:	201c      	movs	r0, #28
 800189e:	f000 f9ba 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 f87f 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM2_IRQHandler+0x10>)
 8001906:	f000 ffe9 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000c8 	.word	0x200000c8

08001914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	; (8001958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	; (8001964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001946:	f7ff ffe5 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194a:	f001 fb0f 	bl	8002f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194e:	f7ff fd29 	bl	80013a4 <main>
  bx lr
 8001952:	4770      	bx	lr
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800195c:	08003004 	.word	0x08003004
  ldr r2, =_sbss
 8001960:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001964:	20000144 	.word	0x20000144

08001968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_2_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x28>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x28>)
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f923 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	200f      	movs	r0, #15
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff ff4c 	bl	8001824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f93b 	bl	8001c32 <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 f903 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000007c 	.word	0x2000007c
 80019f0:	20000084 	.word	0x20000084
 80019f4:	20000080 	.word	0x20000080

080019f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_IncTick+0x1c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_IncTick+0x20>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <HAL_IncTick+0x20>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000084 	.word	0x20000084
 8001a18:	20000140 	.word	0x20000140

08001a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HAL_GetTick+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000140 	.word	0x20000140

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <__NVIC_EnableIRQ+0x34>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff90 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff2d 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff42 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff90 	bl	8001b20 <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5f 	bl	8001acc <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff35 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b08b      	sub	sp, #44	; 0x2c
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	e161      	b.n	8001f24 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c60:	2201      	movs	r2, #1
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8150 	bne.w	8001f1e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a97      	ldr	r2, [pc, #604]	; (8001ee0 <HAL_GPIO_Init+0x294>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d05e      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c88:	4a95      	ldr	r2, [pc, #596]	; (8001ee0 <HAL_GPIO_Init+0x294>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d875      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c8e:	4a95      	ldr	r2, [pc, #596]	; (8001ee4 <HAL_GPIO_Init+0x298>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d058      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001c94:	4a93      	ldr	r2, [pc, #588]	; (8001ee4 <HAL_GPIO_Init+0x298>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d86f      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001c9a:	4a93      	ldr	r2, [pc, #588]	; (8001ee8 <HAL_GPIO_Init+0x29c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d052      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001ca0:	4a91      	ldr	r2, [pc, #580]	; (8001ee8 <HAL_GPIO_Init+0x29c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d869      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001ca6:	4a91      	ldr	r2, [pc, #580]	; (8001eec <HAL_GPIO_Init+0x2a0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d04c      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cac:	4a8f      	ldr	r2, [pc, #572]	; (8001eec <HAL_GPIO_Init+0x2a0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d863      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cb2:	4a8f      	ldr	r2, [pc, #572]	; (8001ef0 <HAL_GPIO_Init+0x2a4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d046      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
 8001cb8:	4a8d      	ldr	r2, [pc, #564]	; (8001ef0 <HAL_GPIO_Init+0x2a4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d85d      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d82a      	bhi.n	8001d18 <HAL_GPIO_Init+0xcc>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d859      	bhi.n	8001d7a <HAL_GPIO_Init+0x12e>
 8001cc6:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <HAL_GPIO_Init+0x80>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d21 	.word	0x08001d21
 8001cd4:	08001d33 	.word	0x08001d33
 8001cd8:	08001d75 	.word	0x08001d75
 8001cdc:	08001d7b 	.word	0x08001d7b
 8001ce0:	08001d7b 	.word	0x08001d7b
 8001ce4:	08001d7b 	.word	0x08001d7b
 8001ce8:	08001d7b 	.word	0x08001d7b
 8001cec:	08001d7b 	.word	0x08001d7b
 8001cf0:	08001d7b 	.word	0x08001d7b
 8001cf4:	08001d7b 	.word	0x08001d7b
 8001cf8:	08001d7b 	.word	0x08001d7b
 8001cfc:	08001d7b 	.word	0x08001d7b
 8001d00:	08001d7b 	.word	0x08001d7b
 8001d04:	08001d7b 	.word	0x08001d7b
 8001d08:	08001d7b 	.word	0x08001d7b
 8001d0c:	08001d7b 	.word	0x08001d7b
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d3d 	.word	0x08001d3d
 8001d18:	4a76      	ldr	r2, [pc, #472]	; (8001ef4 <HAL_GPIO_Init+0x2a8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1e:	e02c      	b.n	8001d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	623b      	str	r3, [r7, #32]
          break;
 8001d26:	e029      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e024      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	3308      	adds	r3, #8
 8001d38:	623b      	str	r3, [r7, #32]
          break;
 8001d3a:	e01f      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	330c      	adds	r3, #12
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e01a      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	623b      	str	r3, [r7, #32]
          break;
 8001d52:	e013      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	611a      	str	r2, [r3, #16]
          break;
 8001d66:	e009      	b.n	8001d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	615a      	str	r2, [r3, #20]
          break;
 8001d72:	e003      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x130>
          break;
 8001d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2bff      	cmp	r3, #255	; 0xff
 8001d80:	d801      	bhi.n	8001d86 <HAL_GPIO_Init+0x13a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_Init+0x13e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d802      	bhi.n	8001d98 <HAL_GPIO_Init+0x14c>
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x152>
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	210f      	movs	r1, #15
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	401a      	ands	r2, r3
 8001db0:	6a39      	ldr	r1, [r7, #32]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80a9 	beq.w	8001f1e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_GPIO_Init+0x2ac>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de4:	4a45      	ldr	r2, [pc, #276]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <HAL_GPIO_Init+0x2b4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1e0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <HAL_GPIO_Init+0x2b8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1dc>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3b      	ldr	r2, [pc, #236]	; (8001f08 <HAL_GPIO_Init+0x2bc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1d8>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e004      	b.n	8001e2e <HAL_GPIO_Init+0x1e2>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x1e2>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_GPIO_Init+0x1e2>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	f002 0203 	and.w	r2, r2, #3
 8001e34:	0092      	lsls	r2, r2, #2
 8001e36:	4093      	lsls	r3, r2
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e3e:	492f      	ldr	r1, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x2b0>)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	492b      	ldr	r1, [pc, #172]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4927      	ldr	r1, [pc, #156]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4921      	ldr	r1, [pc, #132]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	491d      	ldr	r1, [pc, #116]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	4917      	ldr	r1, [pc, #92]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4913      	ldr	r1, [pc, #76]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01f      	beq.n	8001f10 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	490d      	ldr	r1, [pc, #52]	; (8001f0c <HAL_GPIO_Init+0x2c0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
 8001edc:	e01f      	b.n	8001f1e <HAL_GPIO_Init+0x2d2>
 8001ede:	bf00      	nop
 8001ee0:	10320000 	.word	0x10320000
 8001ee4:	10310000 	.word	0x10310000
 8001ee8:	10220000 	.word	0x10220000
 8001eec:	10210000 	.word	0x10210000
 8001ef0:	10120000 	.word	0x10120000
 8001ef4:	10110000 	.word	0x10110000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40010800 	.word	0x40010800
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40011000 	.word	0x40011000
 8001f0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_GPIO_Init+0x2f4>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	4909      	ldr	r1, [pc, #36]	; (8001f40 <HAL_GPIO_Init+0x2f4>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	3301      	adds	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f47f ae96 	bne.w	8001c60 <HAL_GPIO_Init+0x14>
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	372c      	adds	r7, #44	; 0x2c
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e001      	b.n	8001f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	807b      	strh	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f82:	787b      	ldrb	r3, [r7, #1]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f8e:	e003      	b.n	8001f98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	041a      	lsls	r2, r3, #16
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb4:	887a      	ldrh	r2, [r7, #2]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	041a      	lsls	r2, r3, #16
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	611a      	str	r2, [r3, #16]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e272      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8087 	beq.w	8002102 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff4:	4b92      	ldr	r3, [pc, #584]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00c      	beq.n	800201a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002000:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d112      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
 800200c:	4b8c      	ldr	r3, [pc, #560]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06c      	beq.n	8002100 <HAL_RCC_OscConfig+0x12c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d168      	bne.n	8002100 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e24c      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x76>
 800203c:	4b80      	ldr	r3, [pc, #512]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a7f      	ldr	r2, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7a      	ldr	r2, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b78      	ldr	r3, [pc, #480]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a77      	ldr	r2, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0xbc>
 8002076:	4b72      	ldr	r3, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a71      	ldr	r2, [pc, #452]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6e      	ldr	r2, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd4>
 8002090:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6a      	ldr	r2, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a67      	ldr	r2, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fcb4 	bl	8001a1c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fcb0 	bl	8001a1c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e200      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe4>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fca0 	bl	8001a1c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fc9c 	bl	8001a1c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1ec      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x10c>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d063      	beq.n	80021d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800211a:	4b49      	ldr	r3, [pc, #292]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11c      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
 8002126:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1c0      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4939      	ldr	r1, [pc, #228]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e03a      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff fc55 	bl	8001a1c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002176:	f7ff fc51 	bl	8001a1c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1a1      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4927      	ldr	r1, [pc, #156]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
 80021a8:	e015      	b.n	80021d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_RCC_OscConfig+0x270>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fc34 	bl	8001a1c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7ff fc30 	bl	8001a1c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e180      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03a      	beq.n	8002258 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7ff fc14 	bl	8001a1c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7ff fc10 	bl	8001a1c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e160      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCC_OscConfig+0x26c>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 faa6 	bl	8002768 <RCC_Delay>
 800221c:	e01c      	b.n	8002258 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_RCC_OscConfig+0x274>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff fbfa 	bl	8001a1c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222a:	e00f      	b.n	800224c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff fbf6 	bl	8001a1c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d908      	bls.n	800224c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e146      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	42420000 	.word	0x42420000
 8002248:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e9      	bne.n	800222c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a6 	beq.w	80023b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b8b      	ldr	r3, [pc, #556]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a87      	ldr	r2, [pc, #540]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b85      	ldr	r3, [pc, #532]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b82      	ldr	r3, [pc, #520]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b7f      	ldr	r3, [pc, #508]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7e      	ldr	r2, [pc, #504]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fbb7 	bl	8001a1c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7ff fbb3 	bl	8001a1c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e103      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x4c8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x312>
 80022d8:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e02d      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x334>
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a66      	ldr	r2, [pc, #408]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	e01c      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x356>
 8002310:	4b61      	ldr	r3, [pc, #388]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a60      	ldr	r2, [pc, #384]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a5d      	ldr	r2, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x36e>
 800232a:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	4b58      	ldr	r3, [pc, #352]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a57      	ldr	r2, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d015      	beq.n	8002376 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7ff fb67 	bl	8001a1c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7ff fb63 	bl	8001a1c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0b1      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ee      	beq.n	8002352 <HAL_RCC_OscConfig+0x37e>
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7ff fb51 	bl	8001a1c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7ff fb4d 	bl	8001a1c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e09b      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	4b40      	ldr	r3, [pc, #256]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d061      	beq.n	800248c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d146      	bne.n	800245e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7ff fb21 	bl	8001a1c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7ff fb1d 	bl	8001a1c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e06d      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	4b29      	ldr	r3, [pc, #164]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d108      	bne.n	8002418 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4921      	ldr	r1, [pc, #132]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a19      	ldr	r1, [r3, #32]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	430b      	orrs	r3, r1
 800242a:	491b      	ldr	r1, [pc, #108]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7ff faf1 	bl	8001a1c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff faed 	bl	8001a1c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e03d      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x46a>
 800245c:	e035      	b.n	80024ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x4cc>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fada 	bl	8001a1c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff fad6 	bl	8001a1c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e026      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x498>
 800248a:	e01e      	b.n	80024ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e019      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x500>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0d0      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b67      	ldr	r3, [pc, #412]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4965      	ldr	r1, [pc, #404]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800253e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002556:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d040      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d115      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e073      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06b      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4936      	ldr	r1, [pc, #216]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7ff fa28 	bl	8001a1c <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7ff fa24 	bl	8001a1c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e053      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d210      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4922      	ldr	r1, [pc, #136]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490a      	ldr	r1, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f986 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
 80026a0:	08002fec 	.word	0x08002fec
 80026a4:	2000007c 	.word	0x2000007c
 80026a8:	20000080 	.word	0x20000080

080026ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b490      	push	{r4, r7}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026b2:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCC_GetSysClockFreq+0xac>)
 80026b4:	1d3c      	adds	r4, r7, #4
 80026b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026bc:	f240 2301 	movw	r3, #513	; 0x201
 80026c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x40>
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x46>
 80026ea:	e02b      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ee:	623b      	str	r3, [r7, #32]
      break;
 80026f0:	e02b      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3328      	adds	r3, #40	; 0x28
 80026fc:	443b      	add	r3, r7
 80026fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002702:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0c5b      	lsrs	r3, r3, #17
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	3328      	adds	r3, #40	; 0x28
 800271a:	443b      	add	r3, r7
 800271c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002720:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002726:	fb03 f202 	mul.w	r2, r3, r2
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
 8002732:	e004      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	623b      	str	r3, [r7, #32]
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002746:	623b      	str	r3, [r7, #32]
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	6a3b      	ldr	r3, [r7, #32]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bc90      	pop	{r4, r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	08002fdc 	.word	0x08002fdc
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	003d0900 	.word	0x003d0900

08002768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <RCC_Delay+0x34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <RCC_Delay+0x38>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002784:	bf00      	nop
  }
  while (Delay --);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <RCC_Delay+0x1c>
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	2000007c 	.word	0x2000007c
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e041      	b.n	800283a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff f84c 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f000 fa6a 	bl	8002cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d001      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e035      	b.n	80028c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_TIM_Base_Start_IT+0x90>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x4e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002886:	d004      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x4e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <HAL_TIM_Base_Start_IT+0x94>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d111      	bne.n	80028b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d010      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	e007      	b.n	80028c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40000400 	.word	0x40000400

080028dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f9b1 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9a4 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f9b3 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b04      	cmp	r3, #4
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0204 	mvn.w	r2, #4
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f987 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f97a 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f989 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0208 	mvn.w	r2, #8
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2204      	movs	r2, #4
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f95d 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f950 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f95f 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0210 	mvn.w	r2, #16
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f933 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f926 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f935 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fdb6 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b80      	cmp	r3, #128	; 0x80
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fa67 	bl	8002f5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8f9 	bl	8002caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0220 	mvn.w	r2, #32
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa32 	bl	8002f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIM_ConfigClockSource+0x18>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0b3      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x180>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3c:	d03e      	beq.n	8002bbc <HAL_TIM_ConfigClockSource+0xd0>
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b42:	f200 8087 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	f000 8085 	beq.w	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	d87f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b54:	2b70      	cmp	r3, #112	; 0x70
 8002b56:	d01a      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xa2>
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d87b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b5c:	2b60      	cmp	r3, #96	; 0x60
 8002b5e:	d050      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x116>
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d877      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d03c      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0xf6>
 8002b68:	2b50      	cmp	r3, #80	; 0x50
 8002b6a:	d873      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d058      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x136>
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d86f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b74:	2b30      	cmp	r3, #48	; 0x30
 8002b76:	d064      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
 8002b78:	2b30      	cmp	r3, #48	; 0x30
 8002b7a:	d86b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d060      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d867      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05c      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d05a      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b8c:	e062      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f000 f95c 	bl	8002e5a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	609a      	str	r2, [r3, #8]
      break;
 8002bba:	e04e      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f000 f945 	bl	8002e5a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bde:	609a      	str	r2, [r3, #8]
      break;
 8002be0:	e03b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 f8bc 	bl	8002d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2150      	movs	r1, #80	; 0x50
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f913 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002c00:	e02b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 f8da 	bl	8002dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2160      	movs	r1, #96	; 0x60
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f903 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002c20:	e01b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 f89c 	bl	8002d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2140      	movs	r1, #64	; 0x40
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f8f3 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002c40:	e00b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f000 f8ea 	bl	8002e26 <TIM_ITRx_SetConfig>
        break;
 8002c52:	e002      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <TIM_Base_SetConfig+0xa8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0x28>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0x28>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <TIM_Base_SetConfig+0xac>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d108      	bne.n	8002cf6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <TIM_Base_SetConfig+0xa8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x52>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x52>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <TIM_Base_SetConfig+0xac>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <TIM_Base_SetConfig+0xa8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	615a      	str	r2, [r3, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40000400 	.word	0x40000400

08002d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0201 	bic.w	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 030a 	bic.w	r3, r3, #10
 8002da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f023 0210 	bic.w	r2, r3, #16
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	031b      	lsls	r3, r3, #12
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	621a      	str	r2, [r3, #32]
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f043 0307 	orr.w	r3, r3, #7
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b087      	sub	sp, #28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	021a      	lsls	r2, r3, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	609a      	str	r2, [r3, #8]
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e041      	b.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d004      	beq.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10c      	bne.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40000400 	.word	0x40000400

08002f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <__libc_init_array>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	2600      	movs	r6, #0
 8002f70:	4d0c      	ldr	r5, [pc, #48]	; (8002fa4 <__libc_init_array+0x38>)
 8002f72:	4c0d      	ldr	r4, [pc, #52]	; (8002fa8 <__libc_init_array+0x3c>)
 8002f74:	1b64      	subs	r4, r4, r5
 8002f76:	10a4      	asrs	r4, r4, #2
 8002f78:	42a6      	cmp	r6, r4
 8002f7a:	d109      	bne.n	8002f90 <__libc_init_array+0x24>
 8002f7c:	f000 f822 	bl	8002fc4 <_init>
 8002f80:	2600      	movs	r6, #0
 8002f82:	4d0a      	ldr	r5, [pc, #40]	; (8002fac <__libc_init_array+0x40>)
 8002f84:	4c0a      	ldr	r4, [pc, #40]	; (8002fb0 <__libc_init_array+0x44>)
 8002f86:	1b64      	subs	r4, r4, r5
 8002f88:	10a4      	asrs	r4, r4, #2
 8002f8a:	42a6      	cmp	r6, r4
 8002f8c:	d105      	bne.n	8002f9a <__libc_init_array+0x2e>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f94:	4798      	blx	r3
 8002f96:	3601      	adds	r6, #1
 8002f98:	e7ee      	b.n	8002f78 <__libc_init_array+0xc>
 8002f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9e:	4798      	blx	r3
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	e7f2      	b.n	8002f8a <__libc_init_array+0x1e>
 8002fa4:	08002ffc 	.word	0x08002ffc
 8002fa8:	08002ffc 	.word	0x08002ffc
 8002fac:	08002ffc 	.word	0x08002ffc
 8002fb0:	08003000 	.word	0x08003000

08002fb4 <memset>:
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4402      	add	r2, r0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d100      	bne.n	8002fbe <memset+0xa>
 8002fbc:	4770      	bx	lr
 8002fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc2:	e7f9      	b.n	8002fb8 <memset+0x4>

08002fc4 <_init>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr

08002fd0 <_fini>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr
